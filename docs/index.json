[{"categories":["饭碗"],"content":"环境 vmware虚拟机3台 centos7.9 minimal docker 20.10.9 k8s 1.24.3 主机名 规格 IP k8s-master 2c-2g-40g 192.168.36.100 k8s-node01 2c-2g-40g 192.168.36.101 k8s-node02 2c-2g-40g 192.168.36.102 ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:1:0","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"步骤 ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:0","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"常规配置 # hosts 192.168.36.100 k8s-master 192.168.36.101 k8s-node01 192.168.36.102 k8s-node02 # 验证网卡mac地址和uuid唯一 cat /sys/class/net/ens160/address cat /sys/class/dmi/id/product_uuid # 禁用swap swapoff -a # 注释fstab里的swap sed -i.bak '/swap/s/^/#/' /etc/fstab # 关闭selinux setenforce 0 引用\r\r至于为什么要关闭swap，借用某博客的一句话“Swap，性能之鸿沟，生死之地，存亡之道，不可不省也。”\r\r ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:1","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"内核配置 # 永久加载br_netfilter模块 ## 在/etc/modules-load.d下添加br_netfilter.conf文件，内容如下： br_netfilter ## systemd-modules-load服务会在开机时自动探测并加载 # 永久修改内核参数 cat \u003c\u003cEOF \u003e /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sysctl -p /etc/sysctl.d/k8s.conf ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:2","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"添加k8s软件源 # repo文件 [kube] name=kube baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ gpgcheck=1 enabled=1 #repo_gpgcheck=1 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg 注意\r\r原文档在repo中添加repo_gpgcheck=1，实测无法验证key，遂将该配置去掉 https://github.com/kubernetes/kubernetes/issues/60134 \r\r ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:3","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"配置免密登录 # master-\u003enode01/02 ssh-keygen -t rsa ssh-copy-id -i .ssh/id_rsa.pub root@k8s-node01 问题\r\r原文档是三master节点，配置01-\u003e02/03，并未配置master-\u003enode，所以需要确认配置的目的\r\r ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:4","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"安装ipvs # 安装依赖包 yum install -y conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget vim net-tools git # 开启ipvs 转发 modprobe br_netfilter modprobe ip_vs modprobe ip_vs_rr modprobe ip_vs_wrr modprobe ip_vs_sh modprobe nf_conntrack cat \u003e /etc/sysconfig/modules/ipvs.modules \u003c\u003c EOF #!/bin/bash modprobe -- ip_vs modprobe -- ip_vs_rr modprobe -- ip_vs_wrr modprobe -- ip_vs_sh modprobe -- nf_conntrack EOF ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:5","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"安装docker # 依赖包 yum install -y yum-utils device-mapper-persistent-data lvm2 引用\r\rDevice Mapper 是 Linux2.6 内核中支持逻辑卷管理的通用设备映射机制，它为实现用于存储资源管理的块设备驱动提供了一个高度模块化的内核架构。\r\r # 添加docker源 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo # 查看可用的docker版本 yum list docker-ce --showduplicates | sort -r # 安装 yum install docker-ce-20.10.9 docker-ce-cli-20.10.9 containerd.io -y # 启动docker服务 systemctl start docker systemctl enable docker 信息\r\r这里选择可选的最新版20.10.9\r\r 引用\r\rDocker CE指的是docker社区版，用于为了开发人员或小团队创建基于容器的应用，与团队成员分享和自动化的开发管道。Docker CE版本提供了简单的安装和快速的安装，以便可以立即开始开发。\r\r ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:6","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"安装命令补全 # 安装bash-completion yum -y install bash-completion # 加载bash-completion source /etc/profile.d/bash_completion.sh 引用\r\rBash自带命令补全功能，但一般我们会安装bash-completion包来得到更好的补全效果，这个包提供了一些现成的命令补全脚本，一些基础的函数方便编写补全脚本，还有一个基本的配置脚本。\r\r ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:7","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"镜像加速 信息\r\r主要的加速器有：Docker官方提供的中国registry mirror、阿里云加速器、DaoCloud 加速器，以阿里为例。\r\r 登陆阿里云容器模块：https://cr.console.aliyun.com 按如下配置 ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:8","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"验证docker docker --version docker run hello-world 以下为正常输出 ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:9","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"修改cgroup driver # 修改daemon.json，新增exec-opts { \"registry-mirrors\": [\"https://v16stybc.mirror.aliyuncs.com\"], \"exec-opts\": [\"native.cgroupdriver=systemd\"] } 警告\r\r注意json每项后面的“,”\r\r 注意\r\r修改cgroupdriver是为了消除告警： [WARNING IsDockerSystemdCheck]: detected “cgroupfs” as the Docker cgroup driver. The recommended driver is “systemd”. Please follow the guide at https://kubernetes.io/docs/setup/cri/\r\r ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:10","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"k8s安装 # 查看可用的版本 yum list kubelet --showduplicates | sort -r # 安装 yum install -y kubelet-1.24.3 kubeadm-1.24.3 kubectl-1.24.3 # 修改kubectl使用的cgroupdriver vi /etc/sysconfig/kubelet KUBELET_EXTRA_ARGS=\"--cgroup-driver=systemd\" # 设置kubelet为开机自启动即可，由于没有生成配置文件，集群初始化后自动启动 systemctl enable kubelet 信息\r\r这里同样使用可用的最新版1.24.3\r\r 引用\r\r kubelet 运行在集群所有节点上，用于启动Pod和容器等对象的工具 kubeadm 用于初始化集群，启动集群的命令工具 kubectl 用于和集群通信的命令行，通过kubectl可以部署和管理应用，查看各种资源，创建、删除和更新各种组件 \r\r ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:11","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"kubectl命令补全 # kubelet命令补全 echo \"source \u003c(kubectl completion bash)\" \u003e\u003e ~/.bash_profile source .bash_profile 信息\r\rkubectl completion命令生成特定shell的补全脚本，可选bash、zsh、fish\r\r ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:12","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"初始化master # 初始化master kubeadm init --kubernetes-version=v1.24.3 --pod-network-cidr=10.224.0.0/16 --apiserver-advertise-address=192.168.36.100 --image-repository registry.aliyuncs.com/google_containers # 加载环境变量 echo \"export KUBECONFIG=/etc/kubernetes/admin.conf\" \u003e\u003e ~/.bash_profile source ~/.bash_profile 初始化错误 kubeadm初始化错误，提示kubelet服务可能运行不正常，检查kubelet服务状态 kubelet运行错误，可能是因为k8s 1.24已删除dockershim，无法调用docker的原因，需要使用cri-dockerd 信息\r\r使用cri-dockerd：https://blog.csdn.net/wuxingge/article/details/125458691 所有节点都需要安装 \r\r 装完cri-dockerd，重新初始化kubeadm # 重置kubeadm kubeadm reset -f # 初始化kubeadm，添加cri-socket kubeadm init --kubernetes-version=v1.24.3 --pod-network-cidr=10.224.0.0/16 --apiserver-advertise-address=192.168.36.100 --image-repository registry.aliyuncs.com/google_containers --cri-socket=unix:///var/run/cri-dockerd.sock ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:13","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"安装flannel网络 # 安装 kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml flannel pod出现问题 查看kube-flannel-ds-amd64日志 这里提示该pod所使用的serviceaccount用户没有调用api group的权限 引用\r\r有关serviceaccount的参考： https://www.cnblogs.com/wlbl/p/10694364.html#serviceaccount \r\r 这里使用的授权插件是rbac，意思是通过角色控制权限。serviceaccount对象代表一个账号，如果要赋予这个帐号权限，我们还需要一个role对象和一个role与serviceaccount绑定的rolebinding对象，这些都是RBAC插件提供的资源对象。 观察到kube-flannel中有对这些对象的定义，看下执行时提示的问题： 这里提到ClusterRole和ClusterRoleBinding在v1beta1中找不到定义，所以这些配置没有生效 在yaml里找出这些配置的源码： 使用的api版本都是v1beta1，但是在v1.22+里已经不可用，需要更换成v1 警告\r\r参考： https://github.com/kelseyhightower/kubernetes-the-hard-way/issues/612 但是我这里安装flannel没有出现warning的提示 \r\r 更换之后重新执行，再重启kube-flannel就可以了 ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:14","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"将work节点加入集群 在master初始化结束时，会返回join所使用的token、discovery-token-ca-cert-hash等信息，如果没有记下来，需要通过以下方式获取： # 在master节点执行 ## 获取token kubeadm token list ## 获取discovery-token-ca-cert-hash openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2\u003e /dev/null | openssl dgst -sha256 -hex | sed 's/^.* //' 注意\r\rtoken 过期时间是24小时 certificate-key 过期时间是2小时 \r\r # 重新生成基础的join命令 kubeadm token create --print-join-command # 添加work节点用生成的命令即可，如果是添加master节点还需要生成certificate-key kubeadm init phase upload-certs --experimental-upload-certs # 添加master节点，使用生成的join命令和certificate-key拼接起来即可 # 在node01和node02上执行，注意和kubeadm init一样要指定cri-socket kubeadm join 192.168.36.100:6443 --token 89y41v.eotdhbpk2v0a1n7d --discovery-token-ca-cert-hash sha256:7ad6aecb98f99621297f27e883e3a51d3114cdec64cefeb5d087a96f0fda8804 --cri-socket=unix:///var/run/cri-dockerd.sock ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:15","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["饭碗"],"content":"安装dashboard # 下载yaml https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml # 修改镜像地址 sed -i 's/kubernetesui/registry.aliyuncs.com\\/google_containers/g' recommended.yaml # 添加nodeport，外部通过https://NodeIp:NodePort 访问Dashboard sed -i '/targetPort: 8443/a\\ \\ \\ \\ \\ \\ nodePort: 30001\\n\\ \\ type: NodePort' recommended.yaml # 增加管理员帐号 cat \u003e\u003e recommended.yaml \u003c\u003c EOF --- # ------------------- dashboard-admin ------------------- # apiVersion: v1 kind: ServiceAccount metadata: name: dashboard-admin namespace: kubernetes-dashboard --- apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRoleBinding metadata: name: dashboard-admin subjects: - kind: ServiceAccount name: dashboard-admin namespace: kubernetes-dashboard roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin # 安装 kubectl apply -f recommended.yaml pod运行失败 查看pod运行状态 查看pod日志 警告\r\r当有多个节点时，安装到非主节点时，会出现一些问题。dashboard使用https去连接apiServer，由于证书问题会导致dial tcp 10.96.0.1:443: i/o timeout。\r\r 修改recommanded.yaml kind:Deployment......spec:nodeName:k8s-master # 指定安装的节点containers:- name:kubernetes-dashboardimage:registry.aliyuncs.com/google_containers/dashboard:v2.0.0-beta8imagePullPolicy:Alwaysports:- containerPort:8443protocol:TCP# 每个Deployment下都修改 # 重新安装dashboard kubectl delete -f recommended.yaml kubectl apply -f recommended.yaml web访问问题 由于设置了NodePort，可以将端口暴露在节点IP上，就可以使用https://:来访问了 web访问显示 查看日志，发现是证书问题 最好的解决方法是使用自签证书 # 由于/etc/kubernetes/pki下已经有ca证书，所以不需要再生成了 # 使用ca证书签发dashboard证书 openssl genrsa -out dashboard.key 2048 openssl req -new -key dashboard.key -out dashboard.csr -subj \"/O=white/CN=dashboard\" openssl x509 -req -in dashboard.csr -CA ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out dashboard.crt -days 3650 # 重新部署kubernetes-dashboard kubectl delete -f recommended.yaml kubectl create -f recommended.yaml # 重新生成secret，指定证书 kubectl create secret generic kubernetes-dashboard-certs -n kubernetes-dashboard --from-file=dashboard.crt=./dashboard.crt --from-file=dashboard.key=./dashboard.key # 提示kubernetes-dashboard-certs已存在的话，先把已有的secret删掉 kubectl delete secrets kubernetes-dashboard-certs -n kubernetes-dashboard # 重启kubernetes-dashboard kubectl delete pod kubernetes-dashboard-659c547786-hcwkz -n kubernetes-dashboard 在主机上安装ca证书，之后访问 创建dashboard-admin用户的token kubectl -n kubernetes-dashboard create token dashboard-admin 失败\r\r网上绝大部份资料，提到创建serviceaccount并绑定clusterrole之后，会自动生成一个secret给该sa，里面附带token，但实测没有。 有关内容见文章末尾。 \r\r 或者可以手动创建一个secret绑定到dashborad-admin # 创建secretapiVersion:v1kind:Secretmetadata:name:dashboard-admin-secretannotations:kubernetes.io/service-account.name:dashboard-adminnamespace:kubernetes-dashboardtype:kubernetes.io/service-account-token# 将secret加到dashboard-adminapiVersion:v1kind:ServiceAccountmetadata:creationTimestamp:\"2022-07-27T09:36:47Z\"name:dashboard-adminnamespace:kubernetes-dashboardresourceVersion:\"30148\"uid:73fb5e3d-8b91-4d3b-bfb2-788451caf418secrets:- name:dashboard-admin-secret 技巧\r\r可以先将dashboard-admin的配置导出成yaml，然后进行修改 kubectl get sa/dashboard-admin -o yaml -n kubernetes-dashboard \u003e dashboardd-admin.yaml \r\r 引用\r\rv1.24开始默认不自动为sa生成secret 发现按照部署操作生成dashborad-admin这个sa，没有查找到对应的secret，正常来说都会通过tokencontroller来自动为其生成secret。 查找资料发现，从v1.24开始LegacyServiceAccountTokenNoAutoGeneration默认为enable，也就是默认不为任何sa自动生成secret The LegacyServiceAccountTokenNoAutoGeneration feature gate is beta, and enabled by default. When enabled, Secret API objects containing service account tokens are no longer auto-generated for every ServiceAccount. Use the TokenRequest API to acquire service account tokens, or if a non-expiring token is required, create a Secret API object for the token controller to populate with a service account token by following this guide. https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.24.md#urgent-upgrade-notes \r\r ","date":"2022-07-28","objectID":"/2022-07-28-k8s-deploy-manually/:2:16","tags":["kubernetes"],"title":"k8s集群 手动部署","uri":"/2022-07-28-k8s-deploy-manually/"},{"categories":["人生"],"content":"pyq留下的最后一张图片\"\rpyq留下的最后一张图片\r ","date":"2022-06-19","objectID":"/2022-06-19-detached-from-society/:0:0","tags":["情绪"],"title":"脱离了社会","uri":"/2022-06-19-detached-from-society/"},{"categories":["人生"],"content":"1 又是一个炎热的夏夜，赤膊着上身坐在屋里，哪怕一动不动都会汗流浃背。 手里晃着没喝完的半罐啤酒，想着刚才和母亲的视频通话再一次因我的冷漠而告终，虽然没有半点懊悔，但心里感觉十分无奈。 每次聊到某些问题，哪怕只说了个标题，我都会在心里点起一把无名之火，之后就进入最拿手的沉默攻击，直至这场“战斗”结束。这对我来说太熟悉了。 问题当然是要沟通的，一味地沉默只会让它在心里越扎越深，但沟通对于我来说，是最难学习的技能，即使我翻遍所有知名的著作，开口之后依旧是混乱不堪。 ","date":"2022-06-19","objectID":"/2022-06-19-detached-from-society/:1:0","tags":["情绪"],"title":"脱离了社会","uri":"/2022-06-19-detached-from-society/"},{"categories":["人生"],"content":"2 4月21日，微信朋友圈十周年之际，我暂时永久性将它关闭。 直接原因当然是因为某个人，但即使没有这个原因，我对于它也厌倦多过期待。 我毫不犹豫地点了那个按钮，没有一秒钟的留恋，看着清爽的微信页面，那个小红点永远消失了，我如释重负。 从此以后，不再关心某个人的近况，也不再关注某些人的幸福，更不期待某些人来关注我的近况，关心我幸不幸福。 ","date":"2022-06-19","objectID":"/2022-06-19-detached-from-society/:2:0","tags":["情绪"],"title":"脱离了社会","uri":"/2022-06-19-detached-from-society/"},{"categories":["人生"],"content":"3 经过半年的挣扎，我可能将自己打磨得更加通透了，我越来越了解自己是个什么样子，也劝说自己不必再为那些不属于你的而患得患失，我的心即将淬火新生，变成一块钢铁。 虽说过去无法忘记，但总归不会经常想起。那些过往的喜怒哀愁，放下了旧的，也许就不会再拿起新的了。 如今的我，没有任何意愿去融入社会，也没有任何意愿去结识他人。让这一切都显得那么浑然天成，让自己也看起来如此悠然自得。 ","date":"2022-06-19","objectID":"/2022-06-19-detached-from-society/:3:0","tags":["情绪"],"title":"脱离了社会","uri":"/2022-06-19-detached-from-society/"},{"categories":["人生"],"content":"4 妈妈，我很孤独，但我不想要你的帮助 因为孤独是一个人的常态，而孤独也是我的宿命 我被遗忘在黑暗的角落，等待着一双手将我抱起 但是他们沐浴着阳光，没有人在注视这里 我曾尝试呼救，声音湮没在这嘈杂之中 我也试着走出偏隅，却无法承受人群的热浪 寒风愈加凛冽，刺痛我单薄的躯体 于是我捡起石头，筑起了一面高墙 寒风再也吹不进来，人们再也寻不到我 我不再等待那双手，我也不必再呼救 此刻的我，是孤独的，是温暖的，是安全的 ","date":"2022-06-19","objectID":"/2022-06-19-detached-from-society/:4:0","tags":["情绪"],"title":"脱离了社会","uri":"/2022-06-19-detached-from-society/"},{"categories":["人生"],"content":" 今天偶然听到这首曲子，才意识到27岁生日已经过去好几个月了。 这个生日，我经历了人生中未曾有过的一个打击，现在想想，多少年的生日都和平常的一天没有区别，这其实对我来说还真算是一个生日礼物。 27岁对我来说并不意味着什么，除了每年都挂在嘴边的“奔三”，实在是想不出任何意义。 有时候看看身边的朋友，成家的成家，立业的立业，那些红色的本本和红色的钞票经常就在你的朋友圈里出现，要说没有压力，那都是在骗自己。 不知道什么时候，我开始发现自己是一个如此敏感的人。之所以这么说，可能就是因为我第一次用了“敏感”这个词。 以前的我，似乎也总是愿意和人比较，明明不如别人，却总想着我比别人好。这么自大的心理，我现在想起来都觉得可笑。那个时候基本是活在街坊邻居老师长辈们的表扬中，也许是他们随口一说，也许是想为了某种目的而利用我，反正对我来说，是挺开心的。 等到真正独立了，当所有人只会以你自身作为评价标准，不再有人夸赞你，把你树得像一杆旗之后，就开始感觉自己突然迷茫了，没有人再因为你的“听话”而夸奖你，也不会有人觉得你“老实”就会对你好，以至于现在的我对于“听话”和“老实”这两个词如此深恶痛绝，也对过去那些只会拿这两个词来表扬我的人们深恶痛绝。 我的自信从哪里来？我觉得自己从来就没找到过，所以我逐渐开始包裹自己，就像上学时只保持一个小圈子一样，如今的我可能连这个小圈子都失去了，我开始彻底断绝与人交往，纵使自我内耗，也要比受他人伤害要强。 我当然认同这一切的根源，是自我认知不足，但我总是说服不了自己，就像母亲也总是说服不了我一样。这种自卑情结就像一颗地雷一样埋在我的身体里，似乎有人触碰，它就会把我炸碎。 从小我就表现出一种偏女性化的性格，这不仅仅存在于周围人的嘴里，也出现在我的意识里。甚至有时候，我表现的比同龄的异性朋友更加脆弱。 但这似乎也不能认定这就是我从小就不敢触碰异性朋友的原因，胆小是一方面，我觉得对于性的过早认识也是一方面，毕竟没有什么是只能归咎于一个问题的。 前段时间，自己深陷于自卑情结中不能自拔，那是一种每天都被卷入一个漩涡，然后自己再每天努力爬出漩涡的过程。甚至自己都在嘲笑自己，都27了，还这样。 等到明年的这个时候，也许我已经能够坦然面对，对着今天所说的话微微一笑，也或许我依然深陷自卑，对着这些文字放声痛哭。不管怎么样，27岁，生日快乐吧。 ","date":"2022-04-06","objectID":"/2022-04-06-happy-birthday/:0:0","tags":["情绪"],"title":"27岁，迟到的生日祝福","uri":"/2022-04-06-happy-birthday/"},{"categories":["人生"],"content":"本来今年没打算写什么，这么浑浑噩噩的一年，又有什么好总结的呢，但是当自己闲下来的时候，那些乱七八糟的想说的话又总在脑子里盘旋，好像不把它们记下来的话，会成为遗憾一样。 上一次做总结，是两年前了，那一年经历了我人生中第一个沉重的打击，与其说是打击，不如说是鞭笞，鞭笞我的怯懦和不负责，而我只想着逃避，就像《复活》里说的“我告诉自己，不能被困在这片绝望的城市里，我要把卡里的钱全部取出来，抑制住因兴奋带来的紧张。” 然而事实却依然如其所说：“你觉得换了一个地方会好，其实都是一样的。”只不过它会以另一种形式摆在你面前。 今年是独居的第二个年头了，起初象征自由的独居生活，慢慢变成了自闭生活。我觉得我越来越不想和别人说话，不想接触别人，就连曾经骄傲的独自旅行，也在日渐社恐的心理和疫情蔓延的双重打击下成为泡影。我不知道这种生活会持续多久，或许我也不在乎会持续多久，毕竟孤独已经成为了一种习惯，但是，当真有人闯入了我的孤独，我可能真的会成为一只破茧的蝴蝶，永远展翅飞舞，就像无脚鸟一样，当它落地的时刻，就代表着死亡。 果真，我现在的情绪也如同行尸走肉，因为某个人的失去，因为某段关系的破灭，我飞不起来了，好像生命突然进入了倒计时，而且异常缓慢，异常艰难。 我不知道自己是否配得上拥有别人，或者被别人拥有，因为从来没有过，所以怀疑。怀疑自己的怯懦是否会伤害到别人，怀疑自己的付出是否真正能帮到别人，这一切都已然成为了我对自身价值的评判标准，也成为了我精神世界的支柱。 今年，获得了人生中第一套属于自己的房子，尽管如今我还未能见到它的雏形，但是这无疑为我的孤独生活提供了一个强有力的保障，不用再怕影响别人，不用再去恐惧接触他人，一切尴尬都将在我的个人世界里消失，我已然能想象到那个样子。 也许那时我的世界将多了一个人，也许那时我依然是孤独一人，但是家的概念，无疑是我希望获得的，一个属于自己的空间，一种属于自己不被别人打扰的生活，我想，在那个空间我将是快乐的，能够忘却一切烦恼的。 我想我的朋友和家人都无法探寻我真正的内心，他们当然都有自己的生活，有自己的家需要照顾，怎么可能时刻去关注我，但也正因为这样，我才会失落，出于对曾经那种美好的逝去，和对如今落寞的人生，怀念过去，正是因为当下的不如意。 我已经厌恶了充满戾气的网络环境，反反复复的争论撕逼，以及那些新一代红卫兵的假惺惺的爱国情怀。我看着那些，我说不出话，似乎我已经丧失了思考的能力，也丧失了和人争论的能力，这个世界虽说从来就没好过，但是我不忍心看着它更糟。人人争当精英，句句戳人软肋。人与人之间的信任已经没有了任何价值，我们都是一个一个碉堡，用枪口来对话，以微孔来窥人，混凝土筑起厚厚的壁垒，那是我们最安全的距离，人与人的交流就是以布满弹孔而结束，这个世界带来了什么，又带走了什么，没有人会在乎。 下一个四季，可能依旧如此吧。 ","date":"2021-12-29","objectID":"/2021/:0:0","tags":["情绪","年终"],"title":"2021","uri":"/2021/"},{"categories":["人生"],"content":"我觉得我做了不可饶恕的事。 她的情况越来越糟，原本的自杀念头已经演变成自残行为了，我觉得事情已经到了危险的地步了，坚定地去报了警。 我觉得只能为她做这件事了，并且一直以来，我都做好了这种心理准备。 然而我没有预料到的是，这件事可能会对她和她的家庭造成灭顶之灾。 警察通知了她的父母，来把她接回家，但是她和我说，她的抑郁症很大一部分是母亲遗传的，她的母亲也有很严重的抑郁症，当她母亲得知了这件事，将会是何等的伤心难过，加上她现在的精神状态，还能遭受这种打击吗。 我突然之间失了声，我没有想到自己眼中“能帮助她的事”可能会害了她，我开始试图解释自己的动机，但是那有什么用呢？ 电话那头，她无力又失望的语气让我不知所措，我感觉自己闯了大祸。 我感觉自己没有力气走路了，因为每想起她刚说的那些话，我都会不自觉地停下脚步，好像有人从背后拉着我一样，我越想越觉得愧疚。 回家之后，我大哭了一场，这已经无关乎是否失去她了，我觉得我在害她。 其实，我当时可以想到更好的办法，但是脑子中一直有一个念头在告诉我，事情已经无法挽回了，一定要报警。我颤颤巍巍地拿起笔，问她的地址在哪，但是我不敢问的太细，我怕她会察觉我要报警。 她当时已经答应我马上回到父母家，并且也已经开始行动了，但是我依然害怕她会失控，没有想任何事，打了110。 她和我说回家的时候，我还提醒了一句，回到家给我发消息，她的情绪虽然低落，但是能听出来，她很开心地答应了。 然而我所做的事，让她失望了。她如此信任我。 我已经不知道如何面对她了，就连道歉的话，也不知道如何说出口。 虽然有人劝我，这不是我的错，任何事都会有阴差阳错，何况我是在已经意识到危险的情况下才做的那件事。 但是我依然抹不去心里的愧疚，我无法想象这件事会造成什么后果，我是否一辈子都无法忘掉。 其实，今天在发生这件事之前，在白天我的担心上升到了极点。 这是这些天来我第一次如此的揪心，好像我已经预见了她的状态一般。 我体会到了她说过的“食之无味”的感觉，甚至每一口，都难以下咽。 我一直都没能真正理解她，我所做只是共情，但那不是理解。真正理解她的人，最知道她想要什么，而我做不到。 可能我扮演的角色从来没有起到作用，我一直都是一厢情愿地付出，而不见成效。 如果这次她能真正走出困境，我也无法再让自己靠近她了，这可能就是我骨子里的那种自卑和自责吧。 ","date":"2021-12-07","objectID":"/2021-12-07/:0:0","tags":["情绪"],"title":"2021-12-07","uri":"/2021-12-07/"},{"categories":["人生"],"content":"这几天过的浑浑噩噩的，为了一个也许我不该认识，却又不后悔认识的朋友，一个我在乎的人。 独居两年多的生活，我基本上是从满怀热情到寂寞难耐 ，每天除了工作基本上不会和其他人说上超过十句的话，说是满不在乎，但其实，我也希望有人能够关注我。 其实，和她相识也有些意外，在社交软件上从不主动聊天的我，每天都像是碰运气似的，等着某个人来发现我，接触我。直到那天，她主动发给我一条消息，说喜欢我分享的电影，我开始只是礼貌地回复了一句谢谢，毕竟让我想出一个话题比登天还难，无意中发现了她的警察职业，于是也就试探性地聊起来。 起初，也就是觉得是位人很普通的但职业不普通的小姐姐，可能聊到没有话题后，也就和其他人一样尘封了起来，没想到她会想让我当成她的电影分享者，这种任务对我来说无疑是会破坏我每日的活动规律，所以确实会有些抗拒，而她却鼓励我，说这种方式会让我感觉被需要，我好像第一次听到有人会给我这种建议，并且心里突然开始窃窃自喜，也许我可以交到一位警察朋友。就这样，开始了我漫长无日的分享工作。 这像是一种游戏，但其实是一种陪伴。 从电影聊到电视剧，再从电视剧聊到奇葩新闻，每天不重样的话题开始增进了关系，再到后来开始互相分享日常与工作，我没有明显的感觉，但是我觉得我开始依赖这种关系了。 这是一种在经历了漫长孤独寒冷之后突然有人向你投来拥抱的温暖，让你每天都盼着和她分享和她聊天。 虽然她也曾说过她的精神状态和情感挫折，她怕我会介意从而嫌弃，但是，我想不出任何理由去歧视这类群体。也许是因为我的讨好型人格，也许是我不想因此失去这个朋友。 她也曾对我的陪伴表示感谢，让我有种被认可的感觉。但其实这种关系是互相的，毕竟两个如此相像的人无法互相救助，只能抱团取暖。 不知道什么时候，我内心的自私开始泛滥，当她别的朋友给了她更大的帮助，甚至可以让她产生爱慕之情时，我心里突然有种晴天霹雳的感觉，我发现自己其实不能帮到她，我的价值找不到了，深深地陷入自我怀疑。 这些心理虽然一直在困扰着我，虽然她也曾说过，我是她不忍失去的朋友，但是我突然意识到，我想要的不仅仅是朋友。 她比我大了七岁，这在旁人眼中自然是不现实的，并且很早之前她也不止一次地说，如果她能够再年轻几岁，我一定是她心仪的对象。而对于我来说，没有一点感情经历的人，是很容易把这种亲密误认为是爱情，所以，即使冲动，也要清醒。 她其实心中一直挂念着她曾经抛弃过的前男友，因为对方遭受的巨大打击，甚至到了依赖心理医生的地步，这也着实让她心中产生愧疚，从此一蹶不振，也过上了吃药和咨询的日子。 这个过不去的坎终于在她心里演化成了心魔，我永远忘不了那天，她哭着对我说她想要求得与前任的复合，她再也受不了折磨了。我从来没有一次见过她如此伤心，好像这个愿望实现不了，她就无法呼吸了一样，但是我没有太在意，安慰她几句后，我以为她慢慢会平静下来，但是这，才刚刚开始。 这个心魔一直围绕着她，伴随着监狱封闭压抑的环境，和前任的拒绝复合，她最终产生了轻生的念头。 我感觉世界像被动摇了一样，她曾经也是那么开朗、爱笑、阳光的女孩，现在被摧残的如此憔悴如此绝望，她已经决定了，或许就在休班回家之后的某一天，她放心不下妈妈，甚至产生了带妈妈一起走的想法。她现在的情绪不是压抑，而是一种平静、无所谓。 我不忍心看到她这样，但是我又能帮她做些什么呢，之前她的情绪压抑，很少说话，我每天都会尝试和她聊天，我觉得有人陪她说说话，会让她感觉好一些，但是现在，我束手无策，我不敢和她说话，虽然我也尝试过引导她去看医生，但是我接触不到她，看不到她的情绪，每天都在幻想着她现在在想什么，幻想着她回家之后会不会做出那些事，如果真的发生了，我要做什么。我脑子里想着这些，在手机上突然翻到了她生日那天的聊天记录，我再也绷不住了，放声大哭。 我希望她能变好，这已经不是我最初的私心了，现在她对我来说很重要，我比她更怕失去。 我尝试过寻求专业机构，但是当我拨通电话，听到排队10人的话语之后，我苦笑了起来，我觉得自己像个傻子，做了件又讽刺又好笑的事。一个决定要去自杀的人，想要寻求专业机构的帮助，还要排队，听着等待音。。。 或许人在彻底绝望的时候，也没什么能帮助自己的了，毕竟有多少人能够真正装得下别人的苦难呢，我真的这样想过，死亡也是一种解脱。 ","date":"2021-12-04","objectID":"/2021-12-04/:0:0","tags":["情绪"],"title":"2021-12-04","uri":"/2021-12-04/"},{"categories":["生活多美好"],"content":"1 论辽阔的北方大地，除了帝都与戈壁，三晋地区似乎是个容易被遗忘的地方，或许是长期被打上煤矿的标签，人们都忘了这里曾经出现了中国最会做生意的商帮，而他们的事迹影响了后世多年。 没错，就是我老乔\"\r没错，就是我老乔\r 平遥曾被誉为中国的“华尔街”，清末这里聚集了全国近一半的票号，虽说当年的辉煌已不再，但是保留完好的清末民居让这个小县城成为了旅游胜地，每到假期这里就会聚集来自全国各地的游客。 虽说如此，旅游业的发达也并没有彻底完善这里的基建，甚至在最繁华的地段，你也不会感受到一丝都市气息，似乎这个县城的一切都要与古城的质朴气息所持平。 平遥城墙\"\r平遥城墙\r 早晨，刚下火车的我还在为天气预报的误判而暗暗窃喜，肚子就已经驱动着双腿去觅食了。 车站周围是觅食禁区，这是基本原则，在婉拒了几位热心黑车司机后，我拐进一条略微隐蔽的街道。然而，一股悠然的生活气息扑面而来，这不仅来自街上稀少的人群，更来自一个个还未营业的店铺，信息显示，很多要等到10点才开门，而已营业的也是空无一人，一股不安的情绪涌了上来。 平遥站\"\r平遥站\r 不知不觉，还是走到了闹市区，来山西第一顿饭肯定跑不了是面（也少有其他的），再三考虑后，还是进了一家品牌店吃了碗“传统”的刀削面。 山西的第一碗刀削面\"\r山西的第一碗刀削面\r ","date":"2021-09-14","objectID":"/2021-09-14-trip-to-shanxi-jinzhong/:1:0","tags":["旅行"],"title":"三晋之地，游古城","uri":"/2021-09-14-trip-to-shanxi-jinzhong/"},{"categories":["生活多美好"],"content":"2 进入古城，一切都和外面不同了，起初我以为整个古城都是景区，然而就像西安和南京一样，城里还是有大量居民的，而且他们依旧住在古朴的院落里。 虽说通票的意义在与城里的各个景点，但进城之前还是要检验一番，而且给城里居民开了绿色通道（虽然不知道凭据是什么）。 西城门\"\r西城门\r 从西门进入，我是没有感受到景区的氛围的，这里冷清得就像村子里的路一样，虽说两侧也有各式各样的店铺，但总归是没有什么人（期间误闯了一个民宿被拒绝参观）。不少热心村民在路旁追着一个又一个的游客，企图将他们拉上自己的“观光车”。我意识到这里的确不是古城的重点，加快脚步直奔中心。 城根\"\r城根\r 无处不在的泰山石敢当\"\r无处不在的泰山石敢当\r 荒凉的巷道\"\r荒凉的巷道\r 由于之前研究过古城的地图，第一天我的目标是北面半个城区，虽然景点不多，但是探寻无人之境是我热衷的。现实是，北面基本上是民居和民宿，走在这里就像误闯一个不知名的村子，你不会知道那些坐落在高台阶上的装饰华丽的院门后面会不会冒出个凶狠猛兽。 然而真正劝退我的，是无处不在的挖掘机，修路小队几乎占据了我想绕开的所有路，最后我只能原路返回，放弃城北探险。 远处的路已经被挖的泥泞不堪\"\r远处的路已经被挖的泥泞不堪\r 靠近了城中心，才感觉到旅游景点的气息，特产、餐馆、小吃、文创，基本上全国的古镇都是一个模板。不过平遥作为曾经辉煌的“金融中心”，只被此等商业铜臭气弥漫就太可惜了，游客买了票可是要看些真东西的。 没有了导游，这些散落的“博物馆”就要靠自己去找了，就像在一座古城中探险一般，每一条街道都要走上三四遍，而每一遍都会找到新的之前没有注意到的东西。 养生布鞋\"\r养生布鞋\r 票号掌柜\"\r票号掌柜\r 票号后院\"\r票号后院\r 舟车劳顿让第一天的参观称作煎熬也不为过，偶尔蹭着别人的导游听听故事，然后每一个参观院落的休息区就成了我的最爱。 相比票号生意场，镖局似乎更合我的意，江湖从来都是深不可测的险恶之地，你会不自觉地好奇于这个行业，好奇于运行于其中的一套生存法则，由此带来一种崇拜感。 镖局前院\"\r镖局前院\r 泥人塑景\"\r泥人塑景\r 钱财运输工具\"\r钱财运输工具\r 此时烈日已准备躲进群房之后，早饭也已经消化殆尽了，虽说很不情愿在景区用餐，但身陷古城之中，也无法脱身，索性就来尝试下景区里的“山西味道”吧。 对于绝大多数餐厅来说，都没有很好的单人餐搭配。一个人在外旅行，按照几个人的量来点餐显然是不现实的。然而找到了这家餐厅，单人套餐基本上能够覆盖几种特色，虽然实际来算还是死贵。 单人餐\"\r单人餐\r 招牌拌面\"\r招牌拌面\r 碗托和栲栳栳是耳目一新的，只不过余味不足，油糕基本也就是普通的炸糕，本地特色的牛肉味道很好，就是数量可怜，加上店里特色的拌面，恢复元气是足够了。油茶相当不错，第一次觉得甜油茶如此完美，甜味并不会喧宾夺主覆盖掉果仁和油茶本身的香气，喝后回味无穷。 ","date":"2021-09-14","objectID":"/2021-09-14-trip-to-shanxi-jinzhong/:2:0","tags":["旅行"],"title":"三晋之地，游古城","uri":"/2021-09-14-trip-to-shanxi-jinzhong/"},{"categories":["生活多美好"],"content":"3 临近傍晚，依然在城中心寻摸着漏掉的景点。天色越来越晚，手里的胶片机也差不多该收了，却依然没有歇息的意思。 从南城门出来，前面是一片广场，除了嬉闹的小孩子们，还有来来往往的人们和小吃摊，本以为出来看看就进城，突然得知晚上有异常灯光秀，索性就在城外转转。 拥挤的南门\"\r拥挤的南门\r 广场是很大，基本看不到广场外的街道和楼房，把这里当成健身公园的基本也都是城里的居民了。跟着音乐找到了喷泉，不过规模之小也没什么留恋的，转头直奔灯光秀现场。 音乐喷泉\"\r音乐喷泉\r 从我离开到回去也许只用了10几分钟，这里已然挤满了人，昏暗的天色让你看不清周围，几盏微弱的照明灯扫过，你才能看清坐在看台上黑压压的人群。这场秀必定不能坐着看了。 看台上满满的人\"\r看台上满满的人\r 城墙上的树影\"\r城墙上的树影\r 城墙为幕，灯光为笔。我一边看着那些全程举着手机而不嫌酸痛的人们，一边看着一幅幅带着历史沧桑宏伟气息的数字画面打在城墙上。话说之前在南京古城见识过这种，不过相比南京那面高大的城墙，眼前的这场还是逊色了不少。 城墙投影\"\r城墙投影\r 城墙投影\"\r城墙投影\r 演出结束，混乱开始。从广场回到城里只能走唯一一座护城河桥，原本设在入场的卡子也撤掉了，炎热的夏夜里人们挤在桥上，满是汗水的酸臭。 人群涌入城内\"\r人群涌入城内\r 夜间街道上的人少了些许，在尝过了心心念念的汾酒和竹叶青，我也向着住处出发了。 城中心各式各样的民宿和旅馆较少，即使有也不是穷游的消费水平承受得起的。所以我和广大青年一样，在古城偏僻的角落里找了一家青旅，作为第一次住青旅的我来说，心情甚为激动。 距离从来不是阻碍我的屏障，20分钟的脚程就来到了西城门，找到了这家隐藏深处的青旅，接待的姐姐对人很温和，却对房门的锁很陌生，最后无奈只能把钥匙交到我手里，让我从里面上锁，反正这间三人间今晚只有我一个人。。。（说好的三人呢） 独占三人间\"\r独占三人间\r ","date":"2021-09-14","objectID":"/2021-09-14-trip-to-shanxi-jinzhong/:3:0","tags":["旅行"],"title":"三晋之地，游古城","uri":"/2021-09-14-trip-to-shanxi-jinzhong/"},{"categories":["生活多美好"],"content":"4 庆幸第二天还没有下雨。 由于第一天已经把大部分的景点逛完了，今天的目标就是扫荡街道与城墙，所以不需要起的太早。。 跟店家打听了早餐点，先把肚子填饱，然而这附近确实没有特色的早餐，一碗馄饨一根油条，也不知道附近的居民是否也在这些店里吃，这价格是真不便宜。 简单不便宜的早餐\"\r简单不便宜的早餐\r 古朴理发店\"\r古朴理发店\r 看见长春俩字我就拍了\"\r看见长春俩字我就拍了\r 工人文化宫\"\r工人文化宫\r 街头\"\r街头\r 整个上午都在半商半民的巷子里穿梭，同时搜罗着还没去过的展馆。最让我有兴趣的要属报纸收藏馆了，一个常规的山西小院， 展示着横跨近一个世纪的报纸，对于我这种猎奇考古爱好者来说就是挖到宝藏了。 民国广告\"\r民国广告\r 多年后苏伊士运河也面临相同的命运\"\r多年后苏伊士运河也面临相同的命运\r 小孩报\"\r小孩报\r 世界最小报也出自我国\"\r世界最小报也出自我国\r 午饭的预想是，随便找个街边小店解决，然而我高估了我所处的位置，只能再回到市楼附近觅食了。 依旧是碗托，不过这次是炒碗托，劲道的碗托、几样蔬菜再配上小麻花，香气扑鼻，刷新了我对它的刻板印象。店家小哥送了一瓶当地沙棘汁，吃完再喝，这一上午的劳累烟消云散了。 炒碗托全场最佳\"\r炒碗托全场最佳\r 下一个目标是一个来自昨天的意外发现，街边一个很不起眼的小屋，门常开着，隐约可以看见里面略显混乱的摆设，窗上贴着一张大海报，上面铺满了各种唱片的封面，随意而不混乱，旁边一张小卡片，写着“文子的唱片儿店”。 昨天我意外发现的时候，应该是全天为数不多的锁门的时候，里面灯亮着却不见人影，无奈之下我只能留到今天来拜访。 进门之后，我犹如进了另一个世界，满是音乐的世界，音响里放着某个我不认识的欧美民谣歌手的作品，音乐冲进我的耳朵而完全隔离了街道的嘈杂，店主在旁边站着，手里一杯刚从咖啡机取出的咖啡，偶尔看着手机，好像他每天都是这样似的。 我从进门就开始扫着架子上的cd，字小灯暗以至于我的眼睛快要贴上去了。很难想象这么小的一个店能摆出这么多这么全的唱片，而我好奇地翻着各个我熟知的乐队，每一张都想拿出来端详一下。 引起我注意的是黑豹香港首发的那张唱片，这在我之前逛过的所有书店里都是见不到的，我毫不犹豫地取出，试探性地去问了问店主，这位大哥是很平易近人，我听着他说新老两版的音质区别，说着说着就要放给我听一下，音响里传来窦唯那年轻有力的呐喊声，我第一次感受到了如此有沉浸感的音乐氛围，与音乐现场不同，现场更多是互动，唱片更多是享受。 之后跟店主大哥聊起了乐队、饭圈、体制和他的开店经历，能在这样一个旅游为主的小县城开这样一个独具个性的店十三年，这确实让我敬佩与羡慕，如果能选择，我当然是选择我喜欢的。 ","date":"2021-09-14","objectID":"/2021-09-14-trip-to-shanxi-jinzhong/:4:0","tags":["旅行"],"title":"三晋之地，游古城","uri":"/2021-09-14-trip-to-shanxi-jinzhong/"},{"categories":["生活多美好"],"content":"5 下午的时间就交给城墙了，飘过一片云彩，太阳又露出来了。在城墙上暴晒的人很少，能在城楼下乘凉当然不愿意走动。 如果想着像西安城墙一样骑着单车飞驰，那完全想错了，平遥的城墙虽说保存完好，却表现出一副年久失修的状态，也许常年接待游客也没有让它有更多资金来修葺，反正南城墙可观赏的长度总共也不足3公里。 南段城墙\"\r南段城墙\r 城楼里摆放的泥人\"\r城楼里摆放的泥人\r 俯视下面的私人宅院\"\r俯视下面的私人宅院\r 从城墙下来，穿过一片安静的商业街，又回到了熟悉的巷道。 在古城闲逛了两天的我终于要出城了，心里还是挂念着尚未探索的城北，索性步行穿越直奔北门。 北门相对是热闹的，并不是说人多，而是各式各样的店铺，现在依然有络绎不绝进程的游客，牵着孩子拉着行李，步履蹒跚地走在石头路上。也许他们有更长的假期。 自己规划的下一站是张壁古堡，来自网上推荐的网红景点。晚上直达介休的火车，有足够的时间，出城觅食。 平遥毕竟不只是古城，在这里依旧可以看得到老式小区和新式高层，让这个小县城看起来比很多地级市还要像地级市。但最重要的是，我没有找到吃饭的地方。 不知不觉，已经走到了河边，然而所谓的“河”，已经是一片黄土了，不知道是因城市规划抽干了水，还是这条古老的河流承载了什么故事。总之，先到公园歇歇脚。 干涸的河流\"\r干涸的河流\r 我坐在长凳上，一边翻着手机，一边提防着旁边甩鞭子的大爷不至于吓我一跳。附近虽然车流不断，却没有什么心仪的小吃，只能原路返回，去那几家靠着景点的餐馆碰碰运气，顺路，会一会本地的冠云牛肉。 不得不佩服自己的运气，在古城里犹豫不决最终没下手的平遥牛肉，居然在这里找到了专卖店，巨大的“超市”二字注定了里面除了牛肉什么都没有。看着本地居民三三两两地进出超市，心想还是挖到宝了。 冠云牛肉基地\"\r冠云牛肉基地\r 这个时间已经临近饭点了，超市里也一副要打烊的模样，超市里面没有人，但看的出来都是些旅游特产式的包装，门口散装的牛肉才是重头戏。 不过还是来晚了，只买到半斤卤牛肉，价格比牛腱是要便宜，但看起来不如牛腱那么有韧性。一块白纸包起来，旁边一位大哥顺手塞进纸袋就扔到我面前，我心想好险牛肉没甩出来。 平遥牛肉\"\r平遥牛肉\r 半斤也就这一点\"\r半斤也就这一点\r 回到北城门附近，这里算是餐馆聚集最多的地方了，来山西两天，粒米未进，这顿当然也不例外，一份烩面鱼，一盆醪糟汤，算是对平遥暂时的告别了。 看着像xx但味道不错\"\r看着像xx但味道不错\r 醪糟鸡蛋羹\"\r醪糟鸡蛋羹\r 赶上火车，向下站出发。 ","date":"2021-09-14","objectID":"/2021-09-14-trip-to-shanxi-jinzhong/:5:0","tags":["旅行"],"title":"三晋之地，游古城","uri":"/2021-09-14-trip-to-shanxi-jinzhong/"},{"categories":["生活多美好"],"content":"6 初到介休，我还是比较惊讶的，如果不是因为张壁古堡，我可能还不知道这个低调的小城市。站前广场和周边商圈就足够撑起整个城市的脸面，这里和其他大中小城市一样，广场舞和声乐小组弥漫着整个广场，手牵手的青年男女穿梭在各式商场和网红店铺，时间从来不会阻挡夜生活的脚步。介休站门面\"\r介休站门面\r 双腿酸胀的我在站前踱来踱去，从繁华商圈走到平民住宅，再从平民住宅走回繁华商圈，走到无聊的时候，就去找歇息的地方了。 由于时间太晚，我预订的旅店就在站前商圈里，也不会耽误第二天的行程。但让我猝不及防的是，旅店楼下就是一个大夜市，到处都是烧烤小吃大排档，如果我不住在楼上，我还真是会狂喜。 事实证明，出门带一副耳塞是很有必要的。 一觉睡到天亮，楼下的夜市也早已声息，环卫工人正忙着清理满大街的垃圾，我也收拾行装准备出发。 早餐\"\r早餐\r 在小吃街吃过了一碗担担面两个肉包子之后，出门就撞见了雨水，假期最后一天，果然不平凡。 从火车站到张壁古堡只有一条公交线，固定半小时的间隔让我有信心掌握全天的行程时间。车上人不多，去景点的人更不多，基本都是附近的村民。 在景点下车后，雨下得正欢，让整个景点看起来更萧条，我甚至都没找到入口。 雨水朦胧了我的眼睛\"\r雨水朦胧了我的眼睛\r 整个古堡基本就是一个村落，比起平遥古城，这里的建筑更加古朴，密密麻麻的院子，弯弯曲曲的石头路，更重要的是，这里没有那么多的网红商店。 关帝庙\"\r关帝庙\r 练兵场\"\r练兵场\r 游览景点我完全是摸着石头过河，这里不像其他景点，有明确的游览路线，所以每到一个院子，我都要进去一探究竟。 我知道我又来早了，展览馆里空空荡荡，路上的人也是相当稀少，我撑着伞，像个村民一样挨家“串门”。 主路\"\r主路\r 无处不在的燕子窝\"\r无处不在的燕子窝\r 早已人走院空\"\r早已人走院空\r 弓箭展览馆\"\r弓箭展览馆\r 这里曾经也是《爸爸去哪儿》的取景地，那些他们住过的房子，早已成了网红景点，只不过如今大门紧锁，你只能通过门缝像个小偷一样窥视。 吴尊家\"\r吴尊家\r 大门紧锁，只能通过门缝看\"\r大门紧锁，只能通过门缝看\r 据说隋末刘武周为了抗击李世民，建筑了该堡，并在城堡的地下构筑了攻守兼备、可屯兵万人的地道，从城门口可以一直通到后山，可惜我没有从入口进入，反向而行，直接来到了半山腰的栈道。阴雨天让地道里异常地冷，我猫着腰往前探着，也能体验一次地道战的感觉。 地道口\"\r地道口\r 地道口\"\r地道口\r 地道里都有路标\"\r地道里都有路标\r 半山腰的出口，外面有栈道直通山下\"\r半山腰的出口，外面有栈道直通山下\r 从阴雨绵绵一直逛到雨过天晴，此时街上的人也开始多了，路边那些所谓的“特产店”想了想还是不光顾，拎着相机四处转转，遇到好景色就抓几张。 通道\"\r通道\r 标准的山西小院\"\r标准的山西小院\r 天文学家\"\r天文学家\r 雨后街景\"\r雨后街景\r 张壁古堡只适合当天游玩，所以这里没有遍地的民宿，即使是在村外，也很少有旅店，直到我逛完，依然能留出两三个小时回城吃晚饭。 回城的公交车人开始多了起来，应该都是回去上班上学的村民，我也生平第一次感觉操着山西口音的妹子声音也可以这么温柔。。。 在山西的最后一顿饭，是大同刀削面。。。也算是首尾呼应了。 随处可见的刀削面原来出自大同\"\r随处可见的刀削面原来出自大同\r 三晋大地，远不止这些风景，如有机会，再来领略。 最后一张古代战地摄影师\"\r最后一张古代战地摄影师\r ","date":"2021-09-14","objectID":"/2021-09-14-trip-to-shanxi-jinzhong/:6:0","tags":["旅行"],"title":"三晋之地，游古城","uri":"/2021-09-14-trip-to-shanxi-jinzhong/"},{"categories":["生活多美好"],"content":"1 转眼已是2021，疫情爆发的第二个年头，这一年来的生活虽说波澜不惊，却也值得回味。从一个海滨城市转战到了另一个海滨城市，一段新的人生也就此开启。 哏儿都总有一种气息吸引着我，这种气息或许来自天津人逗趣儿的性格，也或许来自根植于此的文化风韵，然而这一切都在滨海这个极其现代化的城区中被淡化了。 ","date":"2021-05-22","objectID":"/2021-05-22-trip-to-binhai/:1:0","tags":["旅行"],"title":"滨海之行，来都来了","uri":"/2021-05-22-trip-to-binhai/"},{"categories":["生活多美好"],"content":"2 直辖市的城际铁路基本都是四通八达的，天津也不例外。从市区到达滨海新区只消半小时的高铁，票价也就是一顿什么都不加的板面的价格。 地上阳光明媚，地下幽暗空旷，这是滨海车站给人的第一印象。 车站外观\"\r车站外观\r 距离午饭时间还有近两个小时，可以随意骑车走走，来看看这边的海河和市区的有何不同。作为港口，船自然是多的，所以这边也就没什么人。 海河大桥\"\r海河大桥\r 海河大桥\"\r海河大桥\r 本打算以海河大桥为界就开始转移阵地（也因为美团单车的范围就到海河大桥），但是不知不觉又往东走了好远，直到看到了闸桥才满足。 新港船闸桥，到此为止\"\r新港船闸桥，到此为止\r 转到居民区中，这里的老社区虽说与市区的差不多，却让我想起了小时候生活的环境，不管住的多远，只要见面了就像一家人一样，大人们在闲聊家常，孩子们在嬉笑打闹，这在矗立一幢幢高楼的新小区中很难再看到了。 然而这时，一个念头闪过我脑中，来自一个种草已久的网红地点–滨海图书馆。 ","date":"2021-05-22","objectID":"/2021-05-22-trip-to-binhai/:2:0","tags":["旅行"],"title":"滨海之行，来都来了","uri":"/2021-05-22-trip-to-binhai/"},{"categories":["生活多美好"],"content":"3 第一次直到滨海图书馆还是因为一张照片，的确很惊艳，虽说设计有些华而不实，却是个非常适合打卡拍照的景点。大老远来了一趟，看还是要看的。午餐匆匆吃了一份锅贴，驱车前往。 其实这个地方就在高铁站北面不远的地方，如果我当时下了车直接就去，会省下不少的时间来逛。 图书馆在滨海文化中心里面，这是个占地极大的场馆，基本上算是整个滨海新区最大的建筑了吧。正前方是个地下隧道的入口，要进文化中心需要从两侧的小路上去，很多第一次来的人都以为要下隧道，之后才发现不对劲，赶紧调头。 文化中心正面\"\r文化中心正面\r 场馆两侧是公园广场，节假日的时候，这里自然成为了停车场，单车电动车数不胜数，全都是慕名而来的青年男女们带来的。 如今文化中心只有一个进出口，可能是因为人太多，连健康码都忽略了，测温直接进。进去后的确是别有洞天，正中央的广场可以举办活动，周围摆一些零散的摊位。左侧是图书馆和剧院，右侧是美术和科技馆，地下遍布美食餐厅，基本上你可以在这里逛上一天都不会觉得无聊。 赶上的王者荣耀比赛\"\r赶上的王者荣耀比赛\r 滨海图书馆真正教会了我什么叫“网红打卡点”。图书馆并非开放式，只有一个出入口，我透过玻璃围墙看到里面已是人满为患，然而外面等待的队伍已经足够把整个场馆包围了，与春运比有过之而无不及。几位老法师提着相机无奈地在远处叹气，来的不是时候。 如此火爆\"\r如此火爆\r 队伍已经延伸到拐角\"\r队伍已经延伸到拐角\r 如果排队估计整个下午就耗在这里了，还是放弃吧，隔着玻璃窗看看足矣。 凑合打卡\"\r凑合打卡\r 场馆另一侧的美术馆和科技馆基本上就是亲子游玩胜地了，科技馆的队伍也不亚于图书馆，于是我最终选择了美术馆。 美术馆拥有它该有的静谧，只是这里的展品亮点不多，多是泥人张作品和抽象油画，似乎这些已经足够这里的民众们欣赏了。小姐姐们倒是把这里当成了拍照胜地，在那些她们看来不知所云的画作中穿梭抓拍，文艺气息加持于身，岂不美哉（此处无图，请脑补）。 ","date":"2021-05-22","objectID":"/2021-05-22-trip-to-binhai/:3:0","tags":["旅行"],"title":"滨海之行，来都来了","uri":"/2021-05-22-trip-to-binhai/"},{"categories":["生活多美好"],"content":"4 闲逛的我一直盯着时间，因为我还有个更重要的游览地点。既然来到天津最靠近海的地方，怎能不去海边一览呢？之前在地图上对两个地点纠结了很久：东疆湾和东疆开发公园。相比东疆湾，开发公园更远，但是其视角开阔，又是免费景点，索性就选这里了。 从城区到东疆，只有一条公交线路，在导航上查看的发车间隔长的令人发指，加上时间越来越晚，我一度犹豫是否放弃。在公交站附近徘徊了n多次后，车来了。此时公交站已经聚集了一大批人，心想基本上是没有坐的机会了，其实这车从起点（也就是上一站）发车的时候就已经没座位了。。 整个行程，乘客基本只上不下，最后已经不用司机开口，挤在前门门口的人们自动劝退要上车的人了。这些坚守阵地的年轻人，就这样坚持站了22站。 车上睡着的大哥\"\r车上睡着的大哥\r 从公交下来，腿是略微僵硬的，不过从公交站到公园还需要走一段距离，这个期间也可以活动一下。这里没有专门的停车场，马路两侧就是车位，停靠的车，每一辆都是一个家庭。 渤海湾\"\r渤海湾\r 防洪堤\"\r防洪堤\r 游人\"\r游人\r 货轮\"\r货轮\r 海风很大，原本明媚的天气也有了点寒意，这里不仅能看到渤海湾，也能看到海运码头。原本以为这种荒凉偏僻的地方应该没人来，是我低估了假日出行的热潮。海边站满了人，公厕排满了人，一个围栏缺口导致一整段的防波堤上人满为患，管理员在栅栏后面时刻盯着下面的人，半步不敢离开。人流就像海水一样渗透进每个空隙之中。 不知何人发现的漏洞\"\r不知何人发现的漏洞\r 管理员视角，盯着人群\"\r管理员视角，盯着人群\r 倾泻而上防洪堤的人群\"\r倾泻而上防洪堤的人群\r 来来回回逗留了两个小时，太阳即将落山，温度也越来越低，于是又站了一路的公交回到了城区。 在市民广场附近下车，穿过了别墅区和老社区，开始觅食。然而这里是一片商业区，我对这里的餐厅并没有太多的兴趣。最后在附近找到了一家板面店，市区的板面店多数是老三样：板面、牛杂面、米线，而这里却是板面和饸饹面，看着新鲜就来试试。 板面饸饹面\"\r板面饸饹面\r ","date":"2021-05-22","objectID":"/2021-05-22-trip-to-binhai/:4:0","tags":["旅行"],"title":"滨海之行，来都来了","uri":"/2021-05-22-trip-to-binhai/"},{"categories":["生活多美好"],"content":"5 填饱肚子后看时间还早，还可以去商圈转一圈，然而里面也没有什么值得看的，走马观花看一眼就可以走了。 之前预定的住处是个失误，在公交车上匆匆忙忙选了一处，只顾着看距离明天去的景点有多远，而忽略了今晚如何到达。此时公交也赶不上，于是就只能硬着头皮顶着冷风蹬车了。 住处是一个小旅馆，在居民区里不至于很偏，其小得隐蔽的门脸我也能预感到里面是什么样。房间小无所谓，重点是糟糕的隔音，这一晚倒是没有听见什么不可描述的声音，却被一位醉酒的大哥扰得烦心，出门在外带副耳塞还是有必要的。 狭小房间里幽暗的灯光和坏风扇\"\r狭小房间里幽暗的灯光和坏风扇\r 没有窗的房间，起床只能靠闹钟。由于今天只有半天的时间，赶早不赶晚，匆匆下楼吃了个早点，按着既定路线奔赴最后一个景点。 ","date":"2021-05-22","objectID":"/2021-05-22-trip-to-binhai/:5:0","tags":["旅行"],"title":"滨海之行，来都来了","uri":"/2021-05-22-trip-to-binhai/"},{"categories":["生活多美好"],"content":"6 天津的古镇并不多，出名者更是少之又少，如果不是之前在地图上寻摸，我还不知道北塘古镇，这个地方似乎存在感极低，不过我依然抱着“来都来了”的心态，前去一探究竟。 从住的地方有公交线路直达，可能是我出发过早的原因，不管是公交站还是公交车看到的多数是上了年纪的大爷大妈，到北塘下车的人也是屈指可数，这一切现象好像都印证了我之前的想法——这个地方存在感真的很低。 古镇其实也有600多年的历史了，曾经靠着鱼盐漕运得以富庶，同时作为军事重镇守卫出海口，然而这一切都被战火摧毁，曾经的繁荣已不复存在。如今的北塘几乎是在原址重建，城墙、街区、炮台都得以还原。 外围城墙\"\r外围城墙\r 还是因为我出发过早，古镇里还是冷冷清清，街区的店铺很少，只是靠近城门堆着一排海鲜馆，这个早饭的时间，各家都还像刚睡醒一样，摆摆桌子搬搬货，我自然对这些没什么兴趣。 海鲜店进货\"\r海鲜店进货\r 如果说外面还算有些人气，里面就完全是一片荒凉，好像这里真的要经历战乱一样，每家都被搬得空空荡荡，零星的几个店铺也只是留着招牌跑了人。这里如果想拍写真，倒是个不错的选择。 老式洋楼\"\r老式洋楼\r 街道空旷\"\r街道空旷\r 惊现同福客栈\"\r惊现同福客栈\r 最里面是一个庭院，和外面一样荒凉，如果到了晚上，应该会充满鬼宅的气息，不过在白天，尤其是太阳刚刚升起的时候，倒是洋溢着安逸静谧的氛围。这里应该不会有多少人像我这样热衷于探寻无人之境，所以我不会让手里的相机闲着的。 庭院\"\r庭院\r 走廊\"\r走廊\r 楼梯\"\r楼梯\r 庭院\"\r庭院\r 逛完“无人区”，时间也过去了一个小时，外面的人依然稀少。 ","date":"2021-05-22","objectID":"/2021-05-22-trip-to-binhai/:6:0","tags":["旅行"],"title":"滨海之行，来都来了","uri":"/2021-05-22-trip-to-binhai/"},{"categories":["生活多美好"],"content":"7 那个庞然大物用它高大的身躯指引着我走去，双垒炮台，似乎是整个古镇最能让人震惊的地方了。虽然是原样重建，但它的庞大自然地带来一种震慑感，也证实了它的巨大耗资——于是，就变成了整个古镇唯一需要门票的景点。 多次穷游让我对门票产生了一种天然的抗拒，就算票价再低，似乎也要犹豫一番，但是，来都来了。 一座吊桥跨过护城河，连接着古镇和炮台。首先映入眼帘的，是它那巨大的城门楼，重建的工程师选择了艺术化的处理，让原本抵御外敌的城楼变得四面通透，远看基本上就是一座巨大的亭子。 正门\"\r正门\r 走上台阶，进入城里，你会惊叹于这里的广阔并哀叹于这里的荒凉。偌大的一个平台，零零散散的游客，看不到任何商业化的设施，远处类似博物馆的建筑也异常死寂。所以吸引人的就只有两座巨型炮台了。 炮台城中心\"\r炮台城中心\r 两座炮台对称排布，各有一段阶梯通往顶端，风时常吹得人站不住脚。 炮台顶端眺望\"\r炮台顶端眺望\r 艰难登城\"\r艰难登城\r 顶端的大炮类似克虏伯，是否是真迹也无从知晓，常年在此风吹雨淋，身上的铁锈也让其充满了历史感。炮口正对着东面，那里是永定新河的出海口，历史上这里必然是军事扼要，而如今在炮台上望去，只能看到一座座跨河桥和上面川流不息的车辆。 座炮\"\r座炮\r 炮台视野\"\r炮台视野\r 除了炮台，这里还还原了整个城墙，从旁边的小路下到城楼上，就可以绕着城墙走一圈。虽说同样是空旷与冷清，却能让你觉得这门票很值。 城墙上眺望\"\r城墙上眺望\r 另一座炮台\"\r另一座炮台\r 城楼\"\r城楼\r 个人认为，景点的资源合理化运用是管理者能力的体现，但是这里却成了活生生的反面教材，工程巨大、占地之广，却没有最大化利用资源，让这里成为了“空城”，或许游客稀少是直接原因，但管理者没有有效吸引游客的手段，是否更是问题根本呢。修葺城墙预留了众多的空间，却一处都没有利用，空空荡荡，不禁想起了南京城墙，连隐蔽的藏兵洞都能容纳一个小型展览馆，可见差距之大。 一无是处的洞穴\"\r一无是处的洞穴\r ","date":"2021-05-22","objectID":"/2021-05-22-trip-to-binhai/:7:0","tags":["旅行"],"title":"滨海之行，来都来了","uri":"/2021-05-22-trip-to-binhai/"},{"categories":["生活多美好"],"content":"8 古镇中心是一片别墅区，从之前的宣传上来看，这里致力于打造一个古色古香的特色别墅区。面朝大海，背靠园区。然而近十年过去了，这里逐渐变成了一片废墟，入住此地的越来越少，也不知是经营不善，还是疫情冲击。 别墅区杳无人烟\"\r别墅区杳无人烟\r 别墅区杳无人烟\"\r别墅区杳无人烟\r 房子多数是二层独楼，青灰的砖瓦墙配上现代的落地窗，古朴而简约，其实第一眼见到这里，以为是某个创业园区，毕竟这种工作环境，很适合小规模公司，倒不太适合居住。如今这里多数已是人去楼空，院子里也成了垃圾堆，之前人们生活过的痕迹不复存在。 破碎的楼梯\"\r破碎的楼梯\r 废弃的别墅庭院\"\r废弃的别墅庭院\r 垃圾堆里的风车\"\r垃圾堆里的风车\r ","date":"2021-05-22","objectID":"/2021-05-22-trip-to-binhai/:8:0","tags":["旅行"],"title":"滨海之行，来都来了","uri":"/2021-05-22-trip-to-binhai/"},{"categories":["生活多美好"],"content":"9 看看时间，不早不晚，正好在城门口休息片刻，此时临近中午，游客开始多了起来，但是也都聚集于城墙根的集市。我旁边是景区的管理处，二楼的阳台上一位中年男子依靠栏杆愁眉不展，楼下的人和他打趣，也只是冷冷一笑，想必这位管理者比任何人都愁吧。 人流开始增多\"\r人流开始增多\r 骑行队伍聚餐\"\r骑行队伍聚餐\r 我翻着地图，继续探索着这个令人惋惜的地方，然后我想起了炮台下的那个广场，还有横跨永定河的那座塔楼桥，我再次看看时间，如果现在去，或许要牺牲掉午饭的时间，直奔高铁，但是，“来都来了”。 我拖着略微酸痛的腿，居然比我正常时走得还要快。 炮台下是一片大广场，除了背靠着两门大炮外，没有任何设施，不过，几个已被遗弃多年的地堡倒是引起了我的注意，它们散布在广场上，枪口和炮台一样，直冲海边。从它们的样子看，不像是现代工业的产物，或许真的是坚守在此地多年。 炮台东广场\"\r炮台东广场\r 碉堡守卫炮台\"\r碉堡守卫炮台\r 穿过广场真是一个漫长的过程，远比我预想的要大，好不容易来到了永定河滨。这里的的确确是成为了亲自乐园，嬉笑声打闹声此起彼伏，同时那座塔楼桥也进入了我的视线。从地图上看，它是通往对面岛的唯一途径，然而现在大门紧锁，已无从知晓对面是否有一个世外桃源了。 塔楼桥\"\r塔楼桥\r 沿河滨望去，远远不止一个公园这么大，河边的栈道已经修到了不可及的地方，可惜这次时间紧迫，不能痛快地走一遭了。 河畔栈道\"\r河畔栈道\r 想看的已经圆满了，我再次拖着双腿，赶往偏僻的公交站，虽说这里背靠着滨海中关村，但是周边的确人烟稀少，想要在此工作真的要再三考虑。 直达高铁的公交车又一次让我见识了假期的力量，本就间隔超长的公交，到达此处已是连车门都要挤爆，我和一位大妈拼尽了力气才能在车门口找到一个站立之处，一位大爷也无奈地说，这个点从滨海回塘沽的人多着呢。 最终和预想的一样，午饭时间阵亡，直奔高铁站，回城休息。 以候车室的屋顶结束\"\r以候车室的屋顶结束\r ","date":"2021-05-22","objectID":"/2021-05-22-trip-to-binhai/:9:0","tags":["旅行"],"title":"滨海之行，来都来了","uri":"/2021-05-22-trip-to-binhai/"},{"categories":["饭碗"],"content":"问题起因 在wsl上欲通过rsync的ssh方式进行文件同步，ssh密钥文件的权限是不能过于开放的，所以需要在wsl下将密钥文件的权限修改成只有文件所有者有读写权限。 但是实际操作发现，在wsl下无论使用文件所有者还是root用户，都不能通过chmod命令修改文件的权限，这无疑是一个比较严峻的问题。 ","date":"2021-02-09","objectID":"/2021-02-09-the-file-permissions-of-wsl/:1:0","tags":["WSL","linux"],"title":"WSL文件权限问题","uri":"/2021-02-09-the-file-permissions-of-wsl/"},{"categories":["饭碗"],"content":"测试 在搜索了一些网络博客后得知，wsl下的文件权限与windows上的文件权限是相关的。由此我们来进行一个测试。 我们在wsl下新建一个文件，可以看到文件和目录的默认权限都为777。 wsl下新建文件\"\rwsl下新建文件\r 当我们在windows下将这个文件修改为所有者只读，在wsl中的权限会变成444（为什么会是444呢？）。 文件权限修改为所有者只读\"\r文件权限修改为所有者只读\r wsl中的权限变成444\"\rwsl中的权限变成444\r 也就是说在wsl下，所有者、用户组和其它用户这三者的权限是同时变化的，这依旧不能解决我们的问题。 那么是否有办法让wsl可以像普通的linux系统一样，可以任意修改文件权限呢？微软当然考虑到了，就是配置wsl元数据。 ","date":"2021-02-09","objectID":"/2021-02-09-the-file-permissions-of-wsl/:2:0","tags":["WSL","linux"],"title":"WSL文件权限问题","uri":"/2021-02-09-the-file-permissions-of-wsl/"},{"categories":["饭碗"],"content":"解决 ","date":"2021-02-09","objectID":"/2021-02-09-the-file-permissions-of-wsl/:3:0","tags":["WSL","linux"],"title":"WSL文件权限问题","uri":"/2021-02-09-the-file-permissions-of-wsl/"},{"categories":["饭碗"],"content":"WSL元数据 wsl元数据可以通过配置文件wsl.conf装载，使windows文件拥有扩展属性并对其进行解释，最终达到的效果就是文件在wsl上拥有独立的文件系统权限。 解释一下上面测试的结果\r\r如果没有配置wsl元数据，文件权限是按照windows当前用户的文件权限进行转换，且对用户、组和其它用户赋予相同的值。比如文件在windows当前用户下的权限是文件所有者只读，在wsl下就会显示为444权限，这也就是为什么我们上边测试文件的权限会变成444。\r\r ","date":"2021-02-09","objectID":"/2021-02-09-the-file-permissions-of-wsl/:3:1","tags":["WSL","linux"],"title":"WSL文件权限问题","uri":"/2021-02-09-the-file-permissions-of-wsl/"},{"categories":["饭碗"],"content":"配置WSL元数据 wsl.conf文件位于wsl的/etc目录下，如果没有的话可以自行新建，该文件格式不正确或缺失不影响wsl正常启动。 以下是官方文档给出的示例： # Enable extra metadata options by default # umask和fmask用于设置权限掩码，这两个掩码作用于文件时会做“或”运算，以最终结果赋予文件权限 [automount] enabled = true root = /windir/ options = \"metadata,umask=22,fmask=11\" mountFsTab = false # Enable DNS – even though these are turned on by default, we'll specify here just to be explicit. [network] generateHosts = true generateResolvConf = true 文件保存后重新启动wsl，再看我们刚才创建的文件，变成了744。没错，是我们配置文件中写的umask(022)和fmask(011)或运算后得到的反掩码的权限。 文件权限变成744，umask和fmask或运算的结果\"\r文件权限变成744，umask和fmask或运算的结果\r 重启wsl的方法\r\r每次打开wsl/ubuntu都会在系统后台添加一个进程，开始以为只要杀掉这个进程就可以完美实现子系统的重启，但实际测试并不能，进入wsl后查看uptime依然是上次重启后的运行时间。 如何可以真正重启wsl呢？这里涉及到了一个服务：LxssManager。wsl是基于这个服务运行的，所以只需要重启这个服务，就可以实现wsl的完美重启啦。 你可以选择在管理员cmd中执行net stop/start LxssManager来重启，也可以在service.msg里找到这个服务重启。 \r\r 既然wsl元数据已经配置成功了，也就是说文件在wsl下拥有了独立的文件权限，我们就可以通过chmod命令随意设置文件权限了。我们把需要修改的ssh私钥文件修改成600权限，再尝试用密钥登录服务器，显示成功！ 完美解决\"\r完美解决\r 参考文档\r\r有关WSL元数据的相关信息： https://docs.microsoft.com/zh-cn/windows/wsl/file-permissions#wsl-metadata-on-windows-files\r\r ","date":"2021-02-09","objectID":"/2021-02-09-the-file-permissions-of-wsl/:3:2","tags":["WSL","linux"],"title":"WSL文件权限问题","uri":"/2021-02-09-the-file-permissions-of-wsl/"},{"categories":["生活多美好"],"content":"利用github、Typora和Hugo搭建自己的博客","date":"2021-02-03","objectID":"/2021-02-03-blog/","tags":["blog"],"title":"github+Typora博客搭建方案","uri":"/2021-02-03-blog/"},{"categories":["生活多美好"],"content":"环境 平台：github pages 框架：hugo 主题：LoveIt 编辑器：Typora ","date":"2021-02-03","objectID":"/2021-02-03-blog/:1:0","tags":["blog"],"title":"github+Typora博客搭建方案","uri":"/2021-02-03-blog/"},{"categories":["生活多美好"],"content":"搭建记录 引用\r\r完整搭建文档可参考：官网文档\r\r ","date":"2021-02-03","objectID":"/2021-02-03-blog/:2:0","tags":["blog"],"title":"github+Typora博客搭建方案","uri":"/2021-02-03-blog/"},{"categories":["生活多美好"],"content":"本地安装hugo 关于Hugo\r\rHugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。\r\r Hugo需要先安装Go语言环境。 在官方github仓库下载对应操作系统的Hugo的zip包。 将下载好的zip包解压到Go安装目录的bin目录下。 Hugo 提供了一个 new 命令来创建一个新的网站： hugo new site my_website cd my_website ","date":"2021-02-03","objectID":"/2021-02-03-blog/:2:1","tags":["blog"],"title":"github+Typora博客搭建方案","uri":"/2021-02-03-blog/"},{"categories":["生活多美好"],"content":"导入主题 github上下载最新版LoveIt主题：Github/Loveit 下载好的zip包解压到my_website下的themes目录。 注意\r\rconfig.toml里的theme参数要和主题目录的名称一致，否则在构建网站时会报错。\r\r ","date":"2021-02-03","objectID":"/2021-02-03-blog/:2:2","tags":["blog"],"title":"github+Typora博客搭建方案","uri":"/2021-02-03-blog/"},{"categories":["生活多美好"],"content":"配置网站 编写my_website下的config.tmol文件。 可以参考官方给出的例子：LoveIt配置示例 ","date":"2021-02-03","objectID":"/2021-02-03-blog/:2:3","tags":["blog"],"title":"github+Typora博客搭建方案","uri":"/2021-02-03-blog/"},{"categories":["生活多美好"],"content":"构建本地网站 hugo serve --disableFastRender # --disableFastRender可以通过hugo的.Scratch来实现实时预览文章效果 通过localhost:1313可以访问本地搭建的网站。 当修改文件时，网站会自动进行更新。 ","date":"2021-02-03","objectID":"/2021-02-03-blog/:2:4","tags":["blog"],"title":"github+Typora博客搭建方案","uri":"/2021-02-03-blog/"},{"categories":["生活多美好"],"content":"导入博文 博文的源文件在my_website下的content/posts。 可以在文章的内容前面加上yaml格式或json格式的元数据参数： # 常用---title:\"文章标题\"date:2021-02-03T00:00:00+08:00draft:false(是否为草稿，如果在hugo serve中加入了参数--buildDrafts/-D，将决定此篇文章是否显示在主页)toc:true(是否启用目录)tags:[\"blog\"](标签)categories:[\"生活多美好\"](分类)lightgallery:true(是否启用lightgallery)---文章正文 图片链接 在assets目录下，每个文章都单独建立一个名为文章名.assets的文件夹用于放置图片。 assets目录用于放置静态资源，在文章中引用的时候，可以以assets目录为根目录来引用。 在本地编辑文章时，我使用的是Typora，可以在软件中设置将图片复制到当前目录下的文章名.assets目录，这样转移到博客网站时，只需要批量修改下引用链接，在开头加上“/”就可以了。 使用图床之后，不必再将本地图片目录上传至博客仓库。 ","date":"2021-02-03","objectID":"/2021-02-03-blog/:2:5","tags":["blog"],"title":"github+Typora博客搭建方案","uri":"/2021-02-03-blog/"},{"categories":["生活多美好"],"content":"推送到github 使用github pages来搭建hugo博客的原理是，在本地先使用hugo生成网站文件，再将包含网站文件的目录推送到github上。也就是hugo会将我们所有的源文件自动转换成网页。 先在源文件的根目录下执行hugo命令生成网站文件，网站文件输出的目录，可以在config.toml中配置“publishDir”参数。 $ hugo Start building sites … | ZH-CN -------------------+-------- Pages | 82 Paginator pages | 1 Non-page files | 0 Static files | 94 Processed images | 0 Aliases | 22 Sitemaps | 1 Cleaned | 0 Total in 3026 ms 完成之后，根目录下会出现一个新目录，其中包含的就是我们转换后得到的网站文件。 $ ls -l total 37 drwxr-xr-x 1 liuchong 197609 0 1月 31 19:58 archetypes/ drwxr-xr-x 1 liuchong 197609 0 2月 9 14:45 assets/ -rw-r--r-- 1 liuchong 197609 19 1月 31 19:58 CNAME -rw-r--r-- 1 liuchong 197609 16770 1月 31 19:58 config.toml drwxr-xr-x 1 liuchong 197609 0 1月 31 19:58 content/ drwxr-xr-x 1 liuchong 197609 0 8月 31 1754 docs/ \u003c-- 这就是我们的网站文件目录 -rw-r--r-- 1 liuchong 197609 7169 1月 31 19:58 LICENSE drwxr-xr-x 1 liuchong 197609 0 1月 31 19:59 resources/ drwxr-xr-x 1 liuchong 197609 0 1月 31 19:58 static/ drwxr-xr-x 1 liuchong 197609 0 1月 31 19:58 themes/ 现在我们就可以用git推送到自己的仓库啦。 $ git add * $ git commit -m \"初始化网站\" $ git push origin main 注意\r\r由于我之前存在一个用于博客的仓库，所以可以直接将其下载到本地，附加上我们本次创建的文件再推送到仓库。如果没有的话，就需要自己先建立一个仓库。\r\r 进入github页面，在仓库的setting页面设置github pages。因为我的网站文件全部在“docs”目录下，所以我将网站的根目录也设置为“docs”。 设置网站目录\"\r设置网站目录\r 最后配置好cname记录，就可以愉快地访问自己的网站了！ ","date":"2021-02-03","objectID":"/2021-02-03-blog/:2:6","tags":["blog"],"title":"github+Typora博客搭建方案","uri":"/2021-02-03-blog/"},{"categories":["生活多美好"],"content":"优化 ","date":"2021-02-03","objectID":"/2021-02-03-blog/:3:0","tags":["blog"],"title":"github+Typora博客搭建方案","uri":"/2021-02-03-blog/"},{"categories":["生活多美好"],"content":"配置cdn 对于国内访问github，还是不太稳定，最好的办法就是给网站配置一个好用的cdn。 鉴于国内各大厂商的服务费用和备案限制，决定还是试一试cloudflare的免费版加速。 注册cloudflare账号后，有非常详细的教程，一步一步教你如何设置。 糟糕的解决方法\r\rcloudflare虽说有免费服务，其可用的节点基本也都在北美，而github的服务器也在北美，其实和没有加速是一样的。。\r\r ","date":"2021-02-03","objectID":"/2021-02-03-blog/:3:1","tags":["blog"],"title":"github+Typora博客搭建方案","uri":"/2021-02-03-blog/"},{"categories":["生活多美好"],"content":"图床建设 考虑使用阿里云oss来搭建图床，较为便宜，对于国内访问来说，图片加载也更快，可以替代cdn。 搭建阿里云oss 参考了很多搭建博客的经验，除却七牛云与又拍云对于备案域名的需要，也除却个人图床的稳定隐患，还是选择了阿里云的oss。 阿里云oss的计费方式基本是存储+下行流量，由于没有免费存储空间，只能购买套餐，9元一年的40G空间套餐还是非常香的，至于下行流量，基本取决于网站的访问量，咱们小破站基本可以忽略了，如果真有大流量，再考虑流量套餐。 推荐一个在线图片压缩网站\r\r博客上的图片总归是要压缩，不可能使用原图的，推荐docsmall，在线压缩，还算比较好用。\r\r 超值套餐\"\r超值套餐\r 购买成功后，进入oss控制台，创建一个新的Bucket，这相当于创建一个新的存储空间。创建之后，就可以在页面中看到图床的域名前缀（后面配置PicGo会用到） 创建Bucket\"\r创建Bucket\r 创建Bucket\"\r创建Bucket\r Bucket页面\"\rBucket页面\r 配置PicGo Typora支持使用PicGo上传图片，并提供了PicGo的下载链接，可以直接下载（可能会有些慢） 下载PicGo App\"\r下载PicGo App\r 为什么用PicGo App，而不是PicGo-Core\r\rPicGo-Core为软件的核心，以命令行形式运行，但是依赖Node.js环境。 PicGo App已经编译为win32程序，可以单独运行，正常为图形化界面但支持命令行操作，图形化在上传博客以外的图片也更加方便。 \r\r 趁着下载的工夫，我们可以来配置一下阿里云的AccessKey，稍后PicGo会使用这个Key来获得oss的访问和操作权限。 配置AccessKey\"\r配置AccessKey\r 考虑到安全问题，进入管理界面后会推荐使用子用户AccessKey，防止主用户的密钥泄漏造成不必要的问题，同时也便于控制子用户的权限。 推荐使用子用户AccessKey\"\r推荐使用子用户AccessKey\r 创建新用户，访问方式勾选“编程访问”，会生成访问密钥。 创建新用户\"\r创建新用户\r 之后在用户信息页面，可以看到生成的AccessKey ID和AccessKey Secret（一定要复制下来，之后页面上就看不到了） 用户信息\"\r用户信息\r 待PicGo安装好之后，可以开始配置图床信息了。重点在于必填项，除了刚才获取的密钥，还有存储空间名（就是Bucket）和存储区域（地区）。其余选项可以根据自己情况填写。 对接阿里云OSS设置\"\r对接阿里云OSS设置\r 配置完成后点“确定”保存并设置为默认图床。可以尝试在Typora上传一个图片。如果成功，在oss页面会看到上传的图片。PicGo的配置到此完成。 测试图片上传\"\r测试图片上传\r 脚本实现分目录上传图片 通过Typora调用PicGo来上传图片，由于在PicGo中设置的图片路径是固定的，表明我们所有博客的图片都将在相同的目录下，这样对于一位整理强迫症患者来说或许是不能容忍的，所以自己动动手，用脚本来实现图片分目录放置。 信息\r\r得益于Typora支持自定义上传脚本，并且PicGo支持命令行执行上传。问题变得容易解决了许多。\r\r 脚本运行环境为bash（git自带），核心功能点如下： 获取图片归属的目录名：目录名应与博文同名，这里也要得益于Typora的自定义上传脚本可以使用${filename}变量，我们就将此变量作为参数传入脚本。 修改PicGo配置中的路径参数：PicGo的配置文件中有图床上传的路径参数，我们既然要实现指定目录上传，就要在每次上传之前都修改这个参数。 调用PicGo上传：PicGo支持命令行使用upload参数来上传图片，然而重点在于要将其返回的图片链接传回给Typora，才能在博文中正确地替换掉图片链接。 最终脚本实现如下: #! /bin/bash # 脚本参数1：从Typora传入的文件名；参数2...：图片的本地绝对路径 conf=\"/c/Users/liuchong/AppData/Roaming/picgo/data.json\" path=\"$(echo $* | awk '{print $1}')/\" pics=\"$(echo $* | awk '{$1=\"\"; print $0}')\" # 修改PicGo配置中的路径值 sed -i /path/{\"s|\\:.*|\\: \\\"$path\\\"|\"} $conf # 这里调用PicGo之后，执行完不会自动结束进程，所以我们将调用放入后台，在上传图片并成功返回链接后，将进程结束（权宜之计）。 echo -n \"$(/e/PicGo/PicGo.exe upload $pics | grep https)\" \u0026 sleep 5 ps -ef | grep \"PicGo\" | awk '{print $2}' | xargs kill \u003e\u003e /dev/null 同时在Typora上设置自定义的上传脚本。 自定义命令，Typora会在最后加入本地图片的路径作为参数\"\r自定义命令，Typora会在最后加入本地图片的路径作为参数\r 最后来试一下是否生效。 问题\r\r虽然脚本支持同时上传多个图片，但是实际测试，Typora在多选图片时，是多次调用命令，而不是将几个图片同时作为参数来一次调用脚本。\r\r 未完待续。。 ","date":"2021-02-03","objectID":"/2021-02-03-blog/:3:2","tags":["blog"],"title":"github+Typora博客搭建方案","uri":"/2021-02-03-blog/"},{"categories":null,"content":" 关于我\r\r一条心系电影的IT狗 一个反抗现实的怂货 \r\r 技术博客的初衷，情绪垃圾桶的宿命\r\r最初搞这个站，无非是跟风装X，写一些只有自己看得懂的“技术论文”，在互联网上招摇撞骗。 但是人生无常，不知什么时候开始，写技术文章的能力越发殆尽，发情绪牢骚的本事逐日渐长，这里也就变成了日常情绪垃圾桶。 不指望有多少人光顾，只当是在混乱焦虑的世界中有自己一块安静的区域。 不过，欢迎你，无意中发现这里的有缘人。 \r\r 本着个人古怪的习惯原则，就不加评论系统了，小伙伴可以在各个平台找到我： 豆瓣 微博 ins 小破站 ","date":"2021-01-31","objectID":"/about/:0:0","tags":null,"title":"我","uri":"/about/"},{"categories":["生活多美好"],"content":"每次说好的早睡早起，都会被一场莫名其妙的梦给搅合了。。今天是烧烤 大概是想念东北的烧烤了，梦中出现了一群如丧尸般渴望吃烧烤的人（包括我和友人）。 一切源于一堂学生时代的美术课，我记得课堂上布置了绘画作业，但我却什么也画不出来（不知道这事跟烧烤有啥关系。。）。好不容易熬到下课，正赶上午饭时间，所有人疯狂向外拥，我和几个友人在学校食堂转了许久，几乎所有店铺，别说没有吃饭的人，连老板都不在。无奈我们只能换一个地方觅食。 结果发现一家烧烤店前门庭若市，队伍之长有如火车站买票。对于烧烤我们自然是不放过，排再长的队也打不消我们的渴求。 之后匪夷所思的一幕出现了，貌似这家供不应求，从前面出现一哥们儿，冲着那些已经买完了的朋友手中的肉串下了口，一次只咬下一块肉，咬完闪身，这速度之快以至于没人能抓住他。。。 看来这家没希望了，我们闪进另一家，这家变成涮串了，但我们不在乎，坐下便开造，这梦也就结束了。。。 （原载于豆瓣） ","date":"2020-02-26","objectID":"/2020-02-26-note/:0:0","tags":["牢骚"],"title":"2020-02-26","uri":"/2020-02-26-note/"},{"categories":["生活多美好"],"content":" 原本有很多话想写下来，无奈提笔忘字，只能东拼西凑。 此刻借着绍兴酒的微醺，在脑中一遍一遍回放着自己今年做过的那些愚蠢的、疯狂的、压抑的、自豪的事。 今年的我是波折的、扭曲的，被自己所波折，被自己所扭曲。也许我现在的压抑情绪还没有消散，但至少我还是清醒的。 今年我遇到了人生第一份让我感觉到巨大压力的工作，这种压力可能不是来自于工作量，而是来自于我尚未成熟的责任心和隐藏内心深处的强大反叛情绪。 我觉得我无法和任何人说清楚这种感受，因为在别人眼中，我的压力微不足道，他们会在耐心聆听之后将一切归咎于我的心态和能力。 我希望改变，但我不愿被指责，越发指责，我越会反叛，这可能是青春期少年才会做的事，但我无法自控。在2019剩下的几个月里，连续的失败挫折让我开始怀疑自己。在那些夜晚，我不止一次地在和心里的另一个自己对话，我应该怎么办，我要不要再坚持，我是不是应该去寻找另一条路，我心里清楚，这一切都是在逃避，而逃避不能解决任何问题，只会让你变得更糟。所以我选择等待，等待一切平静下来，然后告诉自己再挺一挺，你会得到一个崭新的让你满意的环境。 工作上的挫败和失落，虽然推倒了我原本就不坚定的意志，但是也许也给我打开了另一扇窗的锁，等着我去推开，但那窗外暗影重重，我不清楚黑暗中有光亮，还是有悬崖。我犹豫不绝，但总归还是要往前走，不是吗？ 我厌恶这份工作，但也感谢这份工作，因为没有它，我可能还是原来的我。 这一年，我接触了“摄影”这个词，其实我很不愿意用这个词，以免别人认为我在装逼。但是，拍照和摄影之间，差的除了器材和技术，还有理念。 春节之后，我终于下定决心买了我人生第一台相机，那是一台老旧的胶片相机，我也正式加入了胶片爱好者的大军。 对于我和摄影的渊源，已经不想再多说。我在拿到相机的那一刻，就像小时候得到了梦寐以求的玩具一样，只不过，我不知道它在我的手中可以发挥出多么大的价值。 所以，我看了很多人，包括大师、爱好者以及像我一样的小白，每个人都有每个人追求的影像，而我也开始摸索我想拍什么，我追求一种什么样的影像，我开始外出徒步，用双腿衡量世界之大，用双眼发现生活之美，在这个过程中，我可能已经爱上了这种生活，而这种生活，可能就是那另一扇窗。 21世纪的第二个10年，经历了中考、高考、工作，虽然过程都很艰难，但是如果结果是能够更加看清自己，那何乐而不为，毕竟还有好几个十年要走。 路并不都是平的，如果想要走一条适合自己的路，就得自己去踩，自己去填。 2020，下一个十年，准备面临更大的挑战。 （原载于豆瓣） ","date":"2019-12-30","objectID":"/2019-12-30-goodbye-2019/:0:0","tags":["情绪","年终"],"title":"2019，我厌恶你，也感谢你","uri":"/2019-12-30-goodbye-2019/"},{"categories":["人生"],"content":" 下班回家，打开电脑，里面是一团糟的方案和代码，看到这些，原本打算挑灯夜战的我，顿感胃酸上反。 工作时间和非工作时间，不知从什么时候开始已经融为了一体，像一对孪生兄弟站在你面前一样。可能多数人选择了随遇而安，而我是拼了命想把他们分开的那种。 我很佩服那些工作狂的同事，但我不愿相信他们的本质就是工作狂，他们只是在一个层面找到了自己的价值并想握住它，亦或是正在寻找自己价值的路上。此刻的我，或许与这两点皆无缘。 并不代表我没有想过去实现它，只是我还没有认清自己，但那又怎么样呢，谁能真正认清自己。 我想我的价值还在和我玩捉迷藏，它和我一样害羞，从来不会主动接触，在某个角落静静地等着。我想，我应该出发了。 我没有尝试过将兴趣变成工作的痛苦，我也不知道这种痛苦会不会溶解在我的热忱中。可能，我还缺少那一点勇气。 但我日思冥想着，想着我在另一条路上的种种场景，我会不会加入工作狂的队伍，我会邂逅我的价值吗，如果那里什么都没有，我将如何孤独地走下去。 我心里明白，这一切都是对眼前的逃避，逃避不是目标，它很可耻，可耻到我相信了它的鬼话，可耻到它给了我勇气。 于是我应该是说服了自己，再坚持一下，曙光即将在前方，那些糟糕的夜晚终将离你远去，革命终究是要靠年轻的我们。 我沉默了一会，双手逃离了键盘，就像董二千唱的那样“浇上汽油，舒展眉头”。 我想这最后一战，无论胜与败，我都会选择离开。而心中的不甘，可能留到下一段路途去慢慢回味吧，没准它会成为我的宝藏。 （原载于豆瓣） ","date":"2019-11-21","objectID":"/2019-11-21-note/:0:0","tags":["牢骚"],"title":"2019-11-21","uri":"/2019-11-21-note/"},{"categories":["人生"],"content":"晚饭过后，闲来无事，在住的地方附近转转，一方面是看看夜景是否有好的拍照效果，另一方面来自傍晚回家时在小区里看到的一幕：一户人家，母亲在厨房做饭的身影和儿子在房间玩游戏的身影同框出现，我真想让那一刻定格，但很遗憾。那画面在我脑中久久不能散去，整齐又洋溢着温情，那是来自一个叫家的安全感。可能一个人独居时间长了，心里越发没有了安全感，或许它也叫归属感。 我穿梭在十点的街道，看着路边小店挤满了刚刚下班渴望填饱肚子的人们，即使今天是星期天。我们忙忙碌碌，忘却了时间和空间，挣着永远也攒不够买房的钱。不知道前路在何方，也不甘轻易撤退，只能让它卡在喉咙然后变成习惯。此时的我，想“家”了。 （原载于豆瓣） ","date":"2019-10-20","objectID":"/2019-10-20-note/:0:0","tags":["牢骚"],"title":"2019-10-20","uri":"/2019-10-20-note/"},{"categories":["生活多美好"],"content":" 国庆因为台风的原因，归家的航班最终还是取消无补。这么一个难得的小长假绝对不容浪费，于是我用了一个上午制定了假期的b计划。 ","date":"2019-10-06","objectID":"/2019-10-06-travels-in-nanjing-and-wuxi/:0:0","tags":["旅行"],"title":"国庆之行：南京-无锡","uri":"/2019-10-06-travels-in-nanjing-and-wuxi/"},{"categories":["生活多美好"],"content":"1 第一站是南京，之前一直有想法领略古都风采，此次也算抓住了一个很好地机会。 到达南京的时候已是黄昏时分，由于在南站落车，距离较为靠近市中心的首个景点就是雨花台。 雨花台在我的意识里，最熟悉的应该是南京保卫战，作为南京城外的扼要阵地，雨花台战役异常惨烈，因此我也误认为烈士陵园是为此而建的。其实在抗战前至建国，我党人士有很多被反动派屠杀于此，因此这里也自然成为了重要的革命教育圣地。 烈士陵园\"\r烈士陵园\r 烈士陵园\"\r烈士陵园\r 烈士陵园\"\r烈士陵园\r 雨花台倒影池\"\r雨花台倒影池\r 离开雨花台的时候，天已经全黑了，但是还陆续有旅游团靠着手机的灯光来参观。 住的地方选在了玄武门附近，从景点的方便程度和价格综合考虑，还是比较合适的。 安排好住处，去附近的狮子桥吃了一份正宗的有“鸭肝”的鸭血粉丝汤。此梗来自一次偶然，一位上海老大爷因为鸭血粉丝没有鸭肝，酒后和店家纠缠不休，由此我脑子里印下了这个概念。 狮子桥\"\r狮子桥\r 鸭血粉丝\"\r鸭血粉丝\r 不得不说南方人很会吃鸭子，盐水鸭、酱鸭、鸭血粉丝、各种卤鸭货，完全没有我们摒弃的腥味，即使是一个不喜欢吃鸭肉的人，也会爱上。 第一天的夜景选在新街口，只因为它是离我最近的。南京的几个重要景点都比较集中，距离也不超过10公里，我本着“能坐地面交通工具就放弃地铁”的原则，选择了单车。 南京的自行车道多是这样的，小心碰头\"\r南京的自行车道多是这样的，小心碰头\r 新街口总的来说没什么值得逛的，只不过是个现代化的商圈，如果不是购物为目的可以忽略。 苏宁\"\r苏宁\r 街头艺人\"\r街头艺人\r 中央商场\"\r中央商场\r 街碑\"\r街碑\r ","date":"2019-10-06","objectID":"/2019-10-06-travels-in-nanjing-and-wuxi/:1:0","tags":["旅行"],"title":"国庆之行：南京-无锡","uri":"/2019-10-06-travels-in-nanjing-and-wuxi/"},{"categories":["生活多美好"],"content":"2 第二天的早饭在一条巷子里的一个小汤包馆解决，店面不起眼但是人很多，我想都是和我一样被推荐来的。小店是一对夫妇经营，老板娘外向能干，负责记单和上菜，老板内向沉稳，负责收钱和收台。 早饭很简单，一笼汤包和一碗白粥，加上老板自制的一碟小菜。价格和一些大店差不多，但是味道绝对不输，还是值得一吃的。 汤包\"\r汤包\r 从巷子出来再有一公里左右就到鼓楼公园了，前一天晚上骑车路过但是早已关门。公园很小，只是围着老鼓楼建了一圈围墙和一圈石子健步路，鼓楼就在中心的高坡上，外表红漆很亮，只不过里面已没有任何内容，人们完全就是为了来打卡拍照的（多数是老年人）。 鼓楼\"\r鼓楼\r 知道鸡鸣寺也是个偶然，在嘉兴伍相祠拍的一张照片被朋友误认为是鸡鸣寺，后来得知这两处可以拍出相似的景观，这次顺便来眼见为实。 南京鸡鸣寺\"\r南京鸡鸣寺\r 嘉兴伍相祠\"\r嘉兴伍相祠\r 鸡鸣寺的做法相比其他景点较为聪明，这次假期买门票免费赠送三柱香，进入景区就指引人们到山顶上香。虽然人很多，但拿着香到处走毕竟不方便，索性直接上山顶，于是人流也就变的有序了很多。 鸡鸣寺\"\r鸡鸣寺\r 鸡鸣寺\"\r鸡鸣寺\r 鸡鸣寺\"\r鸡鸣寺\r 鸡鸣寺\"\r鸡鸣寺\r 总统府的计划在看到堵满了整条街的人流后放弃了，旁边的1，912老街区也沦为了各种餐馆和酒吧的天地，让我印象深刻的只有那列袖珍的游览蒸汽机车。 总统府\"\r总统府\r 总统府\"\r总统府\r 1912街区\"\r1912街区\r 1912街区\"\r1912街区\r 下午及晚上的时间全部贡献给秦淮河和城墙，这一带的景点不多，但价格不低，在经历夫子庙的失望过后我便决定不再为附近其他景点消费。走马观花逛完了夫子庙周边，我便直奔南城墙而去。 夫子庙景区\"\r夫子庙景区\r 夫子庙景区\"\r夫子庙景区\r 夫子庙景区\"\r夫子庙景区\r 夫子庙景区\"\r夫子庙景区\r 南京的老城区也是比较破败的，可能一个古老的城市，还是应该最大可能保留它原有的模样吧。 我一直走到城东南角的雨花门才发现寻找登城口的路线是错的，但是没办法已经来到城外，只能硬着头皮往中华门走。 雨花门\"\r雨花门\r 城墙很高，貌似比之前看过的西安城墙还要高。我在城墙根发现了很多洞口，从字来看应该是解放后所建，这些人防工事的作用不言而喻，只不过把这些洞口设在城外，是方便了自己还是方便了敌人，我至今也没找到明确的答案。 城墙\"\r城墙\r 城墙\"\r城墙\r 城南段的城墙一共有五处登城口，中华门瓮城景点居多，吸引来的游客也是最多的。南京城墙历时30年完成，其过程难以想象。每块城墙砖都有制作地的官印，清理完成后可以清晰地看到调运的官员和制砖人的姓名。 中华门\"\r中华门\r 印有铭文的城砖\"\r印有铭文的城砖\r 从中华门走到集庆门用了近两个小时，很坑的是这一段人很少，相比另一侧没有自行车可以租，甚至所有的服务点都关了门，只能靠着双脚走到i下一个登城口。 内城墙下面就是整齐的旧民居，稍高一点的，我可以在城墙上和房顶的人平视。时间也不早了，从下面的烟囱里飘来了阵阵饭香，无法下城的我真有纵身一跃跳进巷子里的想法。 城墙\"\r城墙\r 城墙\"\r城墙\r 城根旧民居\"\r城根旧民居\r 城墙会一直开到晚上9点，但是中华门关闭较早。我下城时天已经黑了，之后找好了一家深藏居民区的锅贴店吃饭，牛肉锅贴配上一碗清淡的阳春面，劳累的身躯得到了些许满足。 锅贴阳春面\"\r锅贴阳春面\r 晚上逛老门东完全是撞上的，我的计划里并没有这个景点，可能是工作没有做充足。当然，几乎所有的老街都被网红店塞满，人流自然是不用说的，只不过走起来甚是乏味。 先锋书店\"\r先锋书店\r 老门东\"\r老门东\r 七进七出后，我找到了一条尚未被开发的巷子，除了没有人，它和其他巷子没有任何区别，但正因为这让它多了一份恐怖，这是我能找到的唯一惊喜。 无人巷\"\r无人巷\r 老宅\"\r老宅\r ","date":"2019-10-06","objectID":"/2019-10-06-travels-in-nanjing-and-wuxi/:2:0","tags":["旅行"],"title":"国庆之行：南京-无锡","uri":"/2019-10-06-travels-in-nanjing-and-wuxi/"},{"categories":["生活多美好"],"content":"3 南京的最后一天，首先必须要去见识一下长江大桥，从市区走交通非常不方便，没有可以直达的公共交通，所以我依然选择老方法–单车。 从上桥到桥头堡还有一公里多的路，你可以选择步行或骑车。我这种中度恐高患者可能走起来有些艰难，桥是越走越高，风也越来越大，总有些站不住的感觉。 上桥\"\r上桥\r 上桥是有两种途径：一种是像我们直接走上来，另一种可以选择到大桥公园乘电梯上来。如果要上桥头堡，需要消费15元，包括了桥头堡和公园的票，可以下到公园离开。 雕像\"\r雕像\r 长江大桥算是里程碑意义的工程，可能只有那个年代能够建造出来，这里包含的不仅是汗水，更是那一代人的信念。 桥头堡\"\r桥头堡\r 留念\"\r留念\r 车流人流\"\r车流人流\r 桥头堡\"\r桥头堡\r 见识完了伟大工程，最后游览城北玄武湖。公园很大，因此人也比较散，相对来看清静了很多。城北一样需要门票登城，但是玄武门周围的城墙多数被高树遮挡，因此考虑到时间因素，弃之。 玄武门\"\r玄武门\r 玄武湖是很多文人骚客喜爱的地方，景点也多具备文人气息，赏花游湖，身心愉悦。 玄武湖公园\"\r玄武湖公园\r 玄武湖公园\"\r玄武湖公园\r 玄武湖公园\"\r玄武湖公园\r 玄武湖公园\"\r玄武湖公园\r 玄武湖公园\"\r玄武湖公园\r 晚上从南京乘高铁到达无锡，首先安排下住处。无锡的夜景貌似南长街是首选，虽然和其他老街风格相似，商业气息浓重，但难得来一次，卡还是要打的。 南长街\"\r南长街\r 南长街\"\r南长街\r ","date":"2019-10-06","objectID":"/2019-10-06-travels-in-nanjing-and-wuxi/:3:0","tags":["旅行"],"title":"国庆之行：南京-无锡","uri":"/2019-10-06-travels-in-nanjing-and-wuxi/"},{"categories":["生活多美好"],"content":"4 来到无锡，三国水浒城是值得一游的，相比真正的老街，这里的气氛更接近古代，虽然全是人工建造。 为了避免排队拥挤，前一天晚上订购了拼团票，第二天可以直接进入。 景区位于太湖湖畔，依山傍水，特别适合搭建三国和水浒的场景。 乘坐公交，距离最近的水浒城还有两站地的时候，车已经开始排起了长队，此处走走停停，又是上坡路，司机坡起一脚油门让车里的人摔了一地。索性，下车。 景区外\"\r景区外\r 每到假期，这里肯定是车多位少，当地村民自然不会放过这赚钱的生意，不计其数的大爷大妈站在院前指挥车辆，面无表情但是眼睛里闪着金光。我无心打听价格，但车都进来了，自然是可以坐地起价。 指引停车\"\r指引停车\r 水浒城在北，三国城在南，如果是市区公交过来，完全可以先去水浒，后游三国，因为返程三国是公交起点。 水浒城\"\r水浒城\r 可能是地广人稀的原因，景区的游客密度让我失望了，加上天气阴沉，景区的气氛变得异常凝重，我想着林教头山神庙的雪夜，奔上了梁山。 梁山\"\r梁山\r 爬上山顶，忠义堂和“替天行道”杏黄大旗（比电视剧里的小）矗立眼前。梁山本是绿林好汉的乌托邦，可到头来“忠义”变成了对天子忠，“替天行道”也变成了替天子行道，忠义之士沦为炮灰，可悲。 忠义堂\"\r忠义堂\r 山顶\"\r山顶\r 山下有阮氏三雄的石碣村、宋江提反诗的浔阳楼和醉打蒋门神的快活林，不过重点还是在唐高州和东京两座大城里。 石桥\"\r石桥\r 浔阳楼\"\r浔阳楼\r 两座城遥相呼应，中间一片沙场，沙场即战场，站在城楼上颇有指挥千军万马之感。 东京城\"\r东京城\r 高唐州\"\r高唐州\r 唐高州本是柴进关押之地，城门旁边便是牢房，气氛很到位，只是这牢门的柱子防不住小朋友的小身躯任意穿梭。 牢门\"\r牢门\r 牢房\"\r牢房\r 城里紫石街甚是热闹，吃喝玩乐，花天酒地。县衙门口摆着一圈长凳，一位老大爷手持铜锣叮叮当当，表演正式开始。 杂耍表演\"\r杂耍表演\r 杂耍表演\"\r杂耍表演\r 第一次这么近距离看杂耍，主力演员自然年龄很小，由于每天持续表演，并没有超高难度的动作，同时表演行云流水，众人拍手叫好。然而散场出现了和电视剧神似的场景，看官们拔脚便走（包括我），同样的场景在打虎李忠再次上演，几百年前是这样，几百年后依然是这样。 在街上闲逛，抬头便看见一个熟悉的身影，手扶钩窗，身子半探，我不知道这条街上有多少人会在她的窗下等着竹竿砸到头上。 武大炊饼店\"\r武大炊饼店\r 武大炊饼店也是个人流聚集的地方，除了二楼可以一睹金莲背影，后院更是满足了人们的偷窥欲，美其名曰“非礼勿视”。 潘金莲\"\r潘金莲\r 非礼勿视\"\r非礼勿视\r 店门口便出现了炊饼摊，模样似酥饼一般，价格不贵，买了两个充饥，咬下去的那一刻我认定，这就是酥饼。武大卖的本是“蒸炊饼”，应该是馒头，或许在这景点摆摊卖馒头不美观吧。 炊饼？酥饼？\"\r炊饼？酥饼？\r 东京城相比较为冷清，主打袖珍版皇宫和袖珍版清明上河街。只是没有一个合适的高度和距离来拍全景。 清明上河街东角子门\"\r清明上河街东角子门\r 皇宫\"\r皇宫\r 水浒城到三国城需要先出再进，买联票的游客都会得到一枚印章作为入城凭证。（干了不好洗） 入城通行证\"\r入城通行证\r 三国城少了份水浒城的市井气息，更多的是宏伟的战场和建筑。在三国城看着赤壁战场，听着“我和我的祖国”、“五星红旗”倒是别有一番滋味。 五星红旗在三国飘扬\"\r五星红旗在三国飘扬\r 湖边就是赤壁之战场景，东吴与曹营分设在一个凸出的山丘两侧，山丘上是周瑜点将台和七星坛，此处景点紧凑，主题相同。 东吴水寨\"\r东吴水寨\r 七星坛\"\r七星坛\r 赤壁缩景\"\r赤壁缩景\r 从七星坛可以下到山丘侧面的栈道，但是不容易发现，穿过之后便可到达曹营水寨，湖上停放着曹操楼船，此处也是留影胜地。 曹营水寨\"\r曹营水寨\r 曹操楼船\"\r曹操楼船\r 出曹营后，可以去观看三英战吕布，景点里的表演都是固定时间的，可以规划好游览时间。就是图个热闹，演员骑着快马围着场地一圈一圈地跑，看着更像马术表演。 三英战吕布\"\r三英战吕布\r 三英战吕布\"\r三英战吕布\r 景区另一侧是一片山坡和竹林，竹林深处便是卧龙岗，孔明的草屋布置的很精致，厨房卧室还有唐老师的蜡像，不少人驻足感慨“诸葛亮很帅”。 卧龙岗\"\r卧龙岗\r 诸葛亮\"\r诸葛亮\r 外面是甘露寺、凤仪亭、吴王宫，作为赤壁之战的主角，吴王宫俨然成为景区最华丽建筑，还真有皇室风范。 吴王宫\"\r吴王宫\r 景点到处都能看到汉服小姐姐，也不管什么地方，哪个朝代，反正穿上就没错。（除了下面这位） 汉服小妹妹\"\r汉服小妹妹\r 晚上时间多，先逛南禅古寺网红小吃街，再来太湖广场露天KTV。 南禅寺\"\r南禅寺\r 南禅寺\"\r南禅寺\r 太湖广场\"\r太湖广场\r 太湖大桥\"\r太湖大桥\r ","date":"2019-10-06","objectID":"/2019-10-06-travels-in-nanjing-and-wuxi/:4:0","tags":["旅行"],"title":"国庆之行：南京-无锡","uri":"/2019-10-06-travels-in-nanjing-and-wuxi/"},{"categories":["生活多美好"],"content":"5 最后的半天时间，打发在惠山古镇。 早上匆匆赶去买“鸿运大包”，虽然辨不清正宗与否，但确实大的名不虚传。 鸿运大包\"\r鸿运大包\r 乘公交很快可以到老街，老街在惠山脚下，相比商业化的古镇，这里更具古风气息。 惠山古镇图\"\r惠山古镇图\r 这里祠堂居多，而且对外开放，满街茶馆，不见西式咖啡，如果淡季来游玩，在幽静的茶馆里坐一坐应该很不错。 祠堂\"\r祠堂\r 祠堂\"\r祠堂\r 沿河茶座\"\r沿河茶座\r 茶楼\"\r茶楼\r 如意桥\"\r如意桥\r 老街里面就是收费景点，惠山寺和天下第二泉都藏在里面，这次因为时间紧迫，下次绝不放过。 锡惠公园\"\r锡惠公园\r 锡惠公园\"\r锡惠公园\r 不知哪位粗心者把门半掩着，我得以撞入一个正在进行修缮的宅院，院里空空荡荡，但原始的结构依然吸引人，话不多说，按快门走人。 老宅院\"\r老宅院\r 老宅院\"\r老宅院\r 老宅院\"\r老宅院\r 金锡之行，自此圆满，虽然人潮拥挤，却也能领略大好河山，也是满足的。收拾行装，拖着酸痛的双腿打道回府。 （原载于豆瓣） ","date":"2019-10-06","objectID":"/2019-10-06-travels-in-nanjing-and-wuxi/:5:0","tags":["旅行"],"title":"国庆之行：南京-无锡","uri":"/2019-10-06-travels-in-nanjing-and-wuxi/"},{"categories":["生活多美好"],"content":" 我一直认为“摄影”这个词离我很远，但是，我离它似乎很近。 ","date":"2019-08-26","objectID":"/2019-08-26-the-photography-with-me/:0:0","tags":["摄影"],"title":"摄影与我","uri":"/2019-08-26-the-photography-with-me/"},{"categories":["生活多美好"],"content":"1 小时候家里有一部胶片傻瓜机，但在我有限的记忆里，我与它几乎没有多少交集。那是一个胶片开始落寞的年代，便捷简单的数码设备更受人们欢迎。 我对影像开始有意识，是从一部三星DV开始的，现在看来可以说它是我接触摄影的契机。 Samsung VP-D380i\"\rSamsung VP-D380i\r 那时小型摄影机还是用磁带来做存储介质，我们每拍完一盒，都会去店里把他转录成视频文件再刻成光盘，然后用那盒磁带进行新一轮拍摄，如此反反复复。 可能对于年少的我来说，那真的只是一个玩的过程，我用它来记录身边的人，也用它来满足自己的好奇和想象。那些影像即使没有什么意义，却永远留在我的记忆深处。 动态的影像总是比静态的更加吸引人，就像现在很多人都喜欢看短视频看电影，而很少去看摄影展。摄影机在人的手里，可以玩出千变万化的效果，这可能也是我最初爱上看电影的原因之一，甚至到现在我在看电影的时候依然会拿出一部分精力来观察画面，那是一种难以言表的兴奋。 ","date":"2019-08-26","objectID":"/2019-08-26-the-photography-with-me/:1:0","tags":["摄影"],"title":"摄影与我","uri":"/2019-08-26-the-photography-with-me/"},{"categories":["生活多美好"],"content":"2 DV光荣退休后，初三那年，因为母亲工作的原因，家中购买了第一台数码相机–索尼Cyber-shot DSC-H10，那也是我第一部真正接触到的相机。 那时我依然没有摄影的概念，只知道它能满足我的一点小小欲望。记得有一段时间，脑子里经常回放的是一些让我印象深刻的电影场景，我就拿着它，像摄影师一样穿行于家里的各个角落，连构图和移位都似电影一样。（正在电脑前的我，想起这些事，忍俊不禁） 2011年10月 吉林乌拉\"\r2011年10月 吉林乌拉\r 2011年10月 吉林乌拉\"\r2011年10月 吉林乌拉\r 2011年10月 吉林乌拉\"\r2011年10月 吉林乌拉\r 2011年10月 吉林乌拉\"\r2011年10月 吉林乌拉\r 这台相机现在依然在家中活跃，我也掌握了当年不懂的那些转盘上的模式和参数，但是拿在手里已经没有了当年的那种满足感。 ","date":"2019-08-26","objectID":"/2019-08-26-the-photography-with-me/:2:0","tags":["摄影"],"title":"摄影与我","uri":"/2019-08-26-the-photography-with-me/"},{"categories":["生活多美好"],"content":"3 大众化的数码相机越做越小，手机反而越做越大。最后，手机取代了相机。 高考之后，我得到了我人生中第一部智能手机–小米2s，当年还并不激烈的手机市场中，小米可谓是年轻人的菜，但对我来说，智能机的新鲜感是一方面，更重要的是，我可以随时随地地拍照了。 2013年10月 长春\"\r2013年10月 长春\r 2015年1月 吉林\"\r2015年1月 吉林\r 2015年9月 长春\"\r2015年9月 长春\r 按快门变成了一种快感，一种不用花钱就能感受到的快感。手机中的照片越来越多，也越来越懒得去看，去翻，存满了就把它们扔到硬盘里，像一壶酒被深埋地下，只不过，多少年后它也不会改变。 后来我开始想提升自己的技术，我没有去买多么专业的设备，没钱是我的主要原因。我开始找各种资料，学习iso、光圈、曝光时间之类的东西，我开始迷恋上手动曝光，享受着自己掌握一张照片的效果的成就感，虽然不乏有装x的成分，但我觉得发现了新大陆，沉迷其中无法自拔。 ","date":"2019-08-26","objectID":"/2019-08-26-the-photography-with-me/:3:0","tags":["摄影"],"title":"摄影与我","uri":"/2019-08-26-the-photography-with-me/"},{"categories":["生活多美好"],"content":"4 我一直觉得我是一个怀旧的人，但这怀旧并不是守旧，而是在你厌恶了高度的智能化后，你会想追回那种需要自己动手的乐趣。我说的就是胶片摄影。 我在工作之后接触了胶片，原因可能和很多人一样，被它的色彩所“毒”到。虽然后来才懂得所谓的“真实色彩”不过是扫描仪的一套预设配置，但是胶片摄影的魅力远不止此。 玩胶片的门槛也是它的乐趣所在：想玩转一台全手动的胶片机，需要你有一定的基础，一旦掌握，就如同打开潘多拉魔盒一般；另外，胶片摄影是最需要耐心的，你无法立刻知道你按下快门的一瞬间会出现什么奇妙的效果，它们需要经过药水冲洗的仪式才能完美呈现出来，这也能放慢你拍摄的节奏，更多去思考一些东西。 2019年4月 苏州\"\r2019年4月 苏州\r 2019年4月 苏州\"\r2019年4月 苏州\r 之后，我逐渐开始喜欢上徒步旅行和早起，一个背包，一部相机，在人们依赖着床和空调的周末，我开始穿梭于城市的各个角落。虽然我不能像那些雄心勃勃的人，动辄上千公里的长途跋涉，但我希望，在生活在一个城市的有限时间里，尽我最大的努力，探索并记录下它的每一面。 2019年6月上海川沙\"\r2019年6月上海川沙\r 2019年7月 上海\"\r2019年7月 上海\r 2019年7月 上海 通勤地铁\"\r2019年7月 上海 通勤地铁\r 现在我的装备很简单，两机两镜，一台单反，一台旁轴，器材从来就不是好作品的充分条件，所以尽量控制自己购买器材的欲望。记录生活就是应该简简单单。 最后放一张全部家当。 （原载于豆瓣） ","date":"2019-08-26","objectID":"/2019-08-26-the-photography-with-me/:4:0","tags":["摄影"],"title":"摄影与我","uri":"/2019-08-26-the-photography-with-me/"},{"categories":["饭碗"],"content":"环境 CentOS 7 Python 2.7.5 ","date":"2019-03-01","objectID":"/2019-03-01-letsencrypt/:1:0","tags":["https","web"],"title":"Let's Encrypt证书申请","uri":"/2019-03-01-letsencrypt/"},{"categories":["饭碗"],"content":"安装 直接使用yum安装certbot yum install certbot ","date":"2019-03-01","objectID":"/2019-03-01-letsencrypt/:2:0","tags":["https","web"],"title":"Let's Encrypt证书申请","uri":"/2019-03-01-letsencrypt/"},{"categories":["饭碗"],"content":"申请证书 确保服务器域名与公网IP绑定。 申请过程中需要使用80端口，若占用可以先关闭。 国内DNS可能会获取不到域名信息。（未测试） # 获取证书（邮箱可选填） certbot certonly --standalone -d shootheart.rocks --email liuch1207@sina.com 出现“Congratulations”字样说明证书获取成功，证书存放在/etc/letsencrypt/live/shootheart.rocks/目录下，共有四个文件： cert.pem - Apache服务器端证书 chain.pem - Apache根证书和中继证书 fullchain.pem - Nginx所需要ssl_certificate文件 privkey.pem - 安全证书KEY文件 ","date":"2019-03-01","objectID":"/2019-03-01-letsencrypt/:3:0","tags":["https","web"],"title":"Let's Encrypt证书申请","uri":"/2019-03-01-letsencrypt/"},{"categories":["饭碗"],"content":"将证书添加到Web服务器 编辑/etc/httpd/conf.d/ssl.conf # Apache服务器 vi /etc/httpd/conf.d/ssl.conf # 修改配置 SSLEngine on SSLCertificateFile /etc/letsencrypt/live/shootheart.rocks/cert.pem SSLCertificateKeyFile /etc/letsencrypt/live/shootheart.rocks/privkey.pem 默认免费证书有效期90天，需要在即将到期时手动续期或自动续期才可以继续使用。 # 手动续期，若证书未到期，可以强行续期--force-renew certbot renew # 也可以配合crontab自动续期 ","date":"2019-03-01","objectID":"/2019-03-01-letsencrypt/:4:0","tags":["https","web"],"title":"Let's Encrypt证书申请","uri":"/2019-03-01-letsencrypt/"},{"categories":["饭碗"],"content":"zabbix_server ","date":"2019-03-01","objectID":"/2019-03-01-zabbix/:1:0","tags":["zabbix","监控"],"title":"Zabbix学习","uri":"/2019-03-01-zabbix/"},{"categories":["饭碗"],"content":"zabbix housekeeping housekeeping的作用是删除数据库中的过期数据。 启用housekeeper需要在zabbix_server运行时添加-R housekeeper_execute执行，此选项可以忽略正在进行中的管家程序。（-R为运行时控制选项） 可以在web页面上对housekeeping选项做设置。 运行时控制不支持openbsd和netbsd系统。 ","date":"2019-03-01","objectID":"/2019-03-01-zabbix/:1:1","tags":["zabbix","监控"],"title":"Zabbix学习","uri":"/2019-03-01-zabbix/"},{"categories":["饭碗"],"content":"zabbix进程用户 Zabbix server 允许使用非 root 用户运行。它将以任何非 root 用户的身份运行。因此，使用非 root 用户运行 server 是没有任何问题的。 如果你试图以“root”身份运行它，它将会切换到一个已经“写死”的“zabbix”用户，可以修改 Zabbix server 配置文件中的“AllowRoot”参数，则可以只以“root”身份运行 Zabbix server。 如果 Zabbix server 和 agent均运行在同一台服务器上，建议使用不同的用户运行 server 和 agent 。否则,，如果两者都以相同的用户运行，Agent 可以访问 Server 的配置文件, 任何 Zabbix 管理员级别的用户都可以很容易地检索到 Server 的信息。例如，数据库密码。 ","date":"2019-03-01","objectID":"/2019-03-01-zabbix/:1:2","tags":["zabbix","监控"],"title":"Zabbix学习","uri":"/2019-03-01-zabbix/"},{"categories":["饭碗"],"content":"zabbix_agent agent可以进行被动检查和主动检查，取决于监控项的类型“Zabbix agent或Zabbix agent（active）” 32位的zabbix agent可以运行在64位系统上，但在某些情况下可能会失败。 agent的运行时控制只有日志级别的设定，且不支持openbsd，netbsd和windows。 agent在UNIX系统上可以以非root用户运行，如果以root身份运行，它将会切换到zabbix用户，可以在配置文件中修改“AllowRoot”参数来允许以root用户运行。 2.2版本以前，zabbix agent在成功退出时返回0，异常时返回255，2.2及更高的版本，成功退出返回0，异常返回1。 ","date":"2019-03-01","objectID":"/2019-03-01-zabbix/:2:0","tags":["zabbix","监控"],"title":"Zabbix学习","uri":"/2019-03-01-zabbix/"},{"categories":["饭碗"],"content":"zabbix_proxy proxy可以代表server工作，将从受监控设备采集到的数据缓存在本地，然后传输到所属的server上。 proxy是可选的，有利于分担单个server的负载。如果只有代理采集数据，server的cpu和磁盘I/O的开销可以降低。 proxy无需本地管理员即可集中监控远程位置、分支机构和网络的理想解决方案。 proxy需要使用独立的数据库。支持SQLite、MySQL、PostgreSQL。使用Oracle和DB2可能会有风险，如自动发现规则中的遇到问题返回值。 proxy的运行时控制选项和server相同。 ","date":"2019-03-01","objectID":"/2019-03-01-zabbix/:3:0","tags":["zabbix","监控"],"title":"Zabbix学习","uri":"/2019-03-01-zabbix/"},{"categories":["饭碗"],"content":"zabbix_sender和zabbix_get server和agnet之间通讯的命令行应用程序，通常用于故障排错或脚本。 ","date":"2019-03-01","objectID":"/2019-03-01-zabbix/:4:0","tags":["zabbix","监控"],"title":"Zabbix学习","uri":"/2019-03-01-zabbix/"},{"categories":["饭碗"],"content":"zabbix自动注册 可以使活动的agent自动注册到服务器上，而不需要手动在服务器上进行配置。 当以前未知的active agent要求检查时，会发生自动注册。 active agent支持对被添加的主机进行被动检查的监控，在agent要求检查时，需要提供配置文件中的“ListenIP”或“ListenPort”字段，将参数发给服务器（多个IP发送到第一个）。 agent需要在配置文件中指定“ServerActive”参数。 服务器从agent收到注册请求时，会调用一个动作（Action），事件源自动注册（Auto-Registion）必须配置为agent自动注册。 在web页面上，进入“配置-\u003e动作”，选择事件源为自动注册，然后新建。 定义动作名称，指定“主机元数据”。元数据一般会发送主机名，但为了便于区分主机，可以选择其他信息。主机元数据在agent配置文件中，有两种“HostMetadata”和“HostMetadataItem”。 在“操作”选项卡中，添加“添加主机”，“添加到主机组”，“链接到模板”等。 ","date":"2019-03-01","objectID":"/2019-03-01-zabbix/:5:0","tags":["zabbix","监控"],"title":"Zabbix学习","uri":"/2019-03-01-zabbix/"},{"categories":["饭碗"],"content":"比较两个字符串是否相等 if [ \"$test\"x = \"test\"x ]; then 注意： 使用单个等号 等号两边有空格 注意到\"$test\"x最后的x，这是特意安排的，因为当$test为空的时候，上面的表达式就变成了x = testx，显然是不相等的。而如果没有这个x，表达式就会报错：[: =: unary operator expected 双引号转义\"$\"，单引号不转义，但是对于\"\"转义需要加-e选项 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:1:0","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"将多行写入文件 cat \u003e\u003e filename \u003c\u003c EOF 输入要写入文件的内容，以EOF为结尾，输入结束 在脚本中，最后EOF需要顶格，否则不被识别 EOF可以换成其他字符，都是可以当作结束符而不显示在文件中 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:2:0","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"echo文字效果 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:3:0","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"文字颜色 #字体颜色：30m-37m 黑、红、绿、黄、蓝、紫、青、白 str=\"kimbo zhang\" echo -e \"\\033[30m ${str}\\033[0m\" ## 黑色字体 echo -e \"\\033[31m ${str}\\033[0m\" ## 红色 echo -e \"\\033[32m ${str}\\033[0m\" ## 绿色 echo -e \"\\033[33m ${str}\\033[0m\" ## 黄色 echo -e \"\\033[34m ${str}\\033[0m\" ## 蓝色 echo -e \"\\033[35m ${str}\\033[0m\" ## 紫色 echo -e \"\\033[36m ${str}\\033[0m\" ## 青色 echo -e \"\\033[37m ${str}\\033[0m\" ## 白色 echo必须添加-e选项 颜色字符也是成对出现，包含在要添加文字两侧 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:3:1","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"文字背景颜色 #背景颜色：40-47 黑、红、绿、黄、蓝、紫、青、白 str=\"kimbo zhang\" echo -e \"\\033[41;37m ${str}\\033[0m\" ## 红色背景色，白色字体 echo -e \"\\033[41;33m ${str}\\033[0m\" ## 红底黄字 echo -e \"\\033[1;41;33m ${str}\\033[0m\" ## 红底黄字 高亮加粗显示 echo -e \"\\033[5;41;33m ${str}\\033[0m\" ## 红底黄字 字体闪烁显示 echo -e \"\\033[47;30m ${str}\\033[0m\" ## 白底黑字 echo -e \"\\033[40;37m ${str}\\033[0m\" ## 黑底白字 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:3:2","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"其他效果 \\033[1;m 设置高亮加粗 \\033[4;m 下划线 \\033[5;m 闪烁 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:3:3","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"shell括号 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:4:0","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"单小括号 命令组。括号中的命令将会新开一个子shell顺序执行，所以括号中的变量不能够被脚本余下的部分使用。括号中多个命令之间用分号隔开，最后一个命令可以没有分号，各命令和括号之间不必有空格。 命令替换。等同于cmd，shell扫描一遍命令行，发现了$(cmd)结构，便将$(cmd)中的cmd执行一次，得到其标准输出，再将此输出放到原来命令。有些shell不支持，如tcsh。 用于初始化数组。如：array=(a b c d) ","date":"2019-02-26","objectID":"/2019-02-26-shell/:4:1","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"双小括号 整数扩展。这种扩展计算是整数型的计算，不支持浮点型。((exp))结构扩展并计算一个算术表达式的值，如果表达式的结果为0，那么返回的退出状态码为1，或者是\"假\"，而一个非零值的表达式所返回的退出状态码将为0，或者是\"true\"。若是逻辑判断，表达式exp为真则为1,假则为0。 只要括号中的运算符、表达式符合C语言运算规则，都可用在$((exp))中，甚至是三目运算符。作不同进位(如二进制、八进制、十六进制)运算时，输出结果全都自动转化成了十进制。如：echo $((16#5f)) 结果为95 (16进制转十进制)。 单纯用 (( )) 也可重定义变量值，比如 a=5; ((a++)) 可将 $a 重定义为6。 常用于算术运算比较，双括号中的变量可以不使用$符号前缀。括号内支持多个表达式用逗号分开。 只要括号中的表达式符合C语言运算规则,比如可以直接使用for((i=0;i\u003c5;i++)), 如果不使用双括号, 则为for i in seq 0 4`或者for i in {0..4}。再如可以直接使用if (($i\u003c5)), 如果不使用双括号, 则为if [ $i -lt 5 ]。 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:4:2","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"单方括号 bash 的内部命令，[和test是等同的。如果我们不用绝对路径指明，通常我们用的都是bash自带的命令。if/test结构中的左中括号是调用test的命令标识，右中括号是关闭条件判断的。这个命令把它的参数作为比较表达式或者作为文件测试，并且根据比较的结果来返回一个退出状态码。if/test结构中并不是必须右中括号，但是新版的Bash中要求必须这样。 Test和[]中可用的比较运算符只有==和!=，两者都是用于字符串比较的，不可用于整数比较，整数比较只能使用-eq，-gt这种形式。无论是字符串比较还是整数比较都不支持大于号小于号。如果实在想用，对于字符串比较可以使用转义形式，如果比较\"ab\"和\"bc\"：[ ab \\\u003c bc ]，结果为真，也就是返回状态为0。 中的逻辑与和逻辑或使用-a 和-o 表示。 字符范围。用作正则表达式的一部分，描述一个匹配的字符范围。作为test用途的中括号内不能使用正则。 在一个array 结构的上下文中，中括号用来引用数组中每个元素的编号。 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:4:3","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"双方括号 [[是 bash 程序语言的关键字。并不是一个命令，[ ] 结构比 结构更加通用。在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割，但是会发生参数扩展和命令替换。 支持字符串的模式匹配，使用=~操作符时甚至支持shell的正则表达式。字符串比较时可以把右边的作为一个模式，而不仅仅是一个字符串，比如[[ hello == hell? ]]，结果为真。[ ] 中匹配字符串或通配符，不需要引号。 使用[[ … ]]条件判断结构，而不是[ … ]，能够防止脚本中的许多逻辑错误。比如，\u0026\u0026、||、\u003c和\u003e 操作符能够正常存在于[ ]条件判断结构中，但是如果出现在 结构中的话，会报错。比如可以直接使用if [[ $a != 1 \u0026\u0026 $a != 2 ]], 如果不适用双括号, 则为if [ $a -ne 1] \u0026\u0026 [ $a != 2 ]或者if [ $a -ne 1 -a $a != 2 ]。 bash把双中括号中的表达式看作一个单独的元素，并返回一个退出状态码。 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:4:4","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"大括号 大括号拓展。(通配(globbing))将对大括号中的文件名做扩展。在大括号中，不允许有空白，除非这个空白被引用或转义。第一种：对大括号中的以逗号分割的文件列表进行拓展。如touch {a,b}.txt 结果为a.txt b.txt。第二种：对大括号中以点点（..）分割的顺序文件列表起拓展作用，如：touch {a..d}.txt 结果为a.txt b.txt c.txt d.txt 代码块，又被称为内部组，这个结构事实上创建了一个匿名函数 。与小括号中的命令不同，大括号内的命令不会新开一个子shell运行，即脚本余下部分仍可使用括号内变量。括号内的命令间用分号隔开，最后一个也必须有分号。{}的第一个命令和左括号之间必须要有一个空格。 几种特殊的替换结构： ${var:-string}和${var:=string}:若变量var为空，则用在命令行中用string来替换${var:-string}，否则变量var不为空时，则用变量var的值来替换${var:-string}；对于${var:=string}的替换规则和${var:-string}是一样的，所不同之处是${var:=string}若var为空时，用string替换${var:=string}的同时，把string赋给变量var： ${var:=string}很常用的一种用法是，判断某个变量是否赋值，没有的话则给它赋上一个默认值。 ${var:+string}的替换规则和上面的相反，即只有当var不是空的时候才替换成string，若var为空时则不替换或者说是替换成变量 var的值，即空值。(因为变量var此时为空，所以这两种说法是等价的) ${var:?string}替换规则为：若变量var不为空，则用变量var的值来替换${var:?string}；若变量var为空，则把string输出到标准错误中，并从脚本中退出。我们可利用此特性来检查是否设置了变量的值。 在上面这五种替换结构中string不一定是常值的，可用另外一个变量的值或是一种命令的输出。 四种模式匹配替换结构： 第一种模式：${variable%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最短的匹配模式 第二种模式： ${variable%%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式 第三种模式：${variable#pattern} 这种模式时，shell在variable中查找，看它是否以给的模式pattern开始，如果是，就从命令行把variable中的内容去掉左边最短的匹配模式 第四种模式： ${variable##pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，就从命令行把variable中的内容去掉右边最长的匹配模式 # 是去掉左边(在键盘上#在$之左边) % 是去掉右边(在键盘上%在$之右边) #和%中的单一符号是最小匹配，两个相同符号是最大匹配。 这四种模式中都不会改变variable的值，其中，只有在pattern中使用了*匹配符号时，%和%%，#和##才有区别。结构中的pattern支持通配符，*表示零个或多个任意字符，?表示仅与一个任意字符匹配，[…]表示匹配中括号里面的字符，[!…]表示不匹配中括号里面的字符。 字符串提取和替换： 第一种模式：${var:num}，这种模式时，shell在var中提取第num个字符到末尾的所有字符。若num为正数，从左边0处开始；若num为负数，从右边开始提取字串，但必须使用在冒号后面加空格或一个数字或整个num加上括号，如${var:-2}、${var:1-3}或${var:(-2)}。 第二种模式：${var:num1:num2}，num1是位置，num2是长度。表示从$var字符串的第$num1个位置开始提取长度为$num2的子串。不能为负数。 第三种模式：${var/pattern/pattern}表示将var字符串的第一个匹配的pattern替换为另一个pattern。 第四种模式：${var//pattern/pattern}表示将var字符串中的所有能匹配的pattern替换为另一个pattern。 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:4:5","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"符号$后的括号 ${a} 变量a的值, 在不引起歧义的情况下可以省略大括号。 $(cmd) 命令替换，和cmd效果相同，结果为shell命令cmd的输，过某些Shell版本不支持$()形式的命令替换, 如tcsh。 $((expression)) 和exprexpression效果相同, 计算数学表达式exp的数值, 其中exp只要符合C语言的运算规则即可, 甚至三目运算符和逻辑表达式都可以计算。 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:4:6","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"变量 local一般用于局部变量声明，多在函数内部使用 shell中定义的变量是全局的，从定义的地方到shell脚本结束或删除的地方为止。 函数定义的变量默认是全局的，作用域从”函数调用时执行变量定义的地方“开始，到shell结束或被删除的地方为止。若函数内变量定义为local，作用域为函数内。函数的参数是local的。 如果同名，函数定义的local变量会屏蔽全局变量。 export将自定义的变量设定为系统环境变量（仅限于本次登陆的当前shell中有效） 参数 -f 代表变量名称为函数名称 -n 删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。 -p 列出所有的shell赋予程序的环境变量 declare和set类似，可用来声明变量并设置变量的属性（r：只读；x：指定为环境变量；i：值可以是数值，字符串或运算式），也可以用来显示shell函数（-f），不加任何参数，则显示全部shell变量和函数（与执行set效果相同）。 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:5:0","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"shell脚本调试 可以在脚本第一行声明解释器后加参数，也可以执行时加参数调试。 参数 -n：不执行脚本，只查找脚本语法是否有问题，给出错误提示。 -v：执行脚本时，先将脚本的内容输出，然后执行脚本，如果有错误也提示。 -x：将执行的脚本内容及输出显示到屏幕上。 echo也是很有用的调试工具，配合exit语句中断执行。 set命令也可以辅助调试 set -n：读取命令不执行 set -v：显示读取的所有行 set -x：显示所有命令及其参数 提示：通过set -x命令开启调试功能，通过set +x关闭调试功能，可以调试两个命令之间的部分 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:6:0","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"let计算工具 let是bash中用于计算的工具，用于执行一个或多个表达式，计算变量不需要加$。如果表达式中出现空格或其他特殊字符，必须引起来 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:7:0","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"shell内部域分隔符IFS IFS(Internal Field Seprator)，内部域分隔符 IFS是一种 set 变量，当 shell 处理\"命令替换\"和\"参数替换\"时，shell 根据 IFS 的值，默认是 space，tab，newline 来拆解读入的变量，然后对特殊字符进行处理，最后重新组合赋值给该变量。 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:8:0","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"特殊变量 $!：后台最近执行命令的PID $?：前台最近命令的结束状态 $$：当前shell的PID $#：传递给脚本的参数数目 $*：以字符串形式输出所有传递给脚本的参数 $@：以$IFS为分隔符列出所有传递到脚本的参数 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:9:0","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"xargs与普通管道区别 普通管道会把前一个命令的输出当成后一个命令的输入。 echo '--help' | cat # 输出： --help xargs将其接受的内容当作后一个命令的参数来运行后一个命令。 echo '--help' | xargs cat # 输出： Usage: cat [OPTION]... [FILE]... Concatenate FILE(s), or standard input, to standard output. -A, --show-all equivalent to -vET -b, --number-nonblank number nonempty output lines ...... xargs的其他选项： -d 默认情况下xargs将其标准输入中的内容以空白(包括空格、Tab、回车换行等)分割成多个之后当作命令行参数传递给其后面的命令，并运行之，我们可以使用 -d 命令指定分隔符。 -p 使用该选项之后xargs并不会马上执行其后面的命令，而是输出即将要执行的完整的命令(包括命令以及传递给命令的命令行参数)，询问是否执行，输入 y 才继续执行，否则不执行。这种方式可以清楚的看到执行的命令是什么样子，也就是xargs传递给命令的参数是什么。 -n 该选项表示将xargs生成的命令行参数，每次传递几个参数给其后面的命令执行，例如如果xargs从标准输入中读入内容，然后以分隔符分割之后生成的命令行参数有10个，使用-n 3 之后表示一次传递给xargs后面的命令是3个参数，因为一共有10个参数，所以要执行4次，才能将参数用完。 -E ，有的系统的xargs版本可能是-e eof-str 该选项指定一个字符串，当xargs解析出多个命令行参数的时候，如果搜索到-e指定的命令行参数，则只会将-e指定的命令行参数之前的参数(不包括-e指定的这个参数)传递给xargs后面的命令。 注意：-E只有在xargs不指定-d的时候有效，如果指定了-d则不起作用，而不管-d指定的是什么字符，空格也不行。 ","date":"2019-02-26","objectID":"/2019-02-26-shell/:10:0","tags":["shell"],"title":"Shell学习","uri":"/2019-02-26-shell/"},{"categories":["饭碗"],"content":"HTTP和HTTPS 使用HTTP协议会存在一定的安全问题，比如客户端与服务器通信的协议可以很容易被窃取，其中的私密信息会被泄漏，再比如攻击者获取到信息后，可以通过篡改其中的数据来达到攻击目的，而客户端无法对篡改的信息进行校验。 HTTPS协议就解决了这三个问题，HTTPS使用HTTP+SSL，达到加密数据的效果，中间人只能获取到密文，而不能真正知道报文中的内容，通信双方携带证书，证书由第三方签发，很难伪造，数据传输携带摘要，数据无法篡改。 ","date":"2019-01-06","objectID":"/2019-01-06-the-process-of-https/:1:0","tags":["https","安全"],"title":"HTTPS原理","uri":"/2019-01-06-the-process-of-https/"},{"categories":["饭碗"],"content":"CA签发证书 首先，服务方需提供公钥、组织信息或个人信息（域名）等给第三方CA机构进行证书申请。 CA机构会通过线上或线下多种渠道对信息进行验证，确认申请信息合法后，会向申请者签发证书。 证书包含以下信息：申请者公钥、申请者的组织信息和个人信息、签发机构 CA 的信息、有效时间、证书序列号等信息的明文，同时包含一个签名。 签名的产生为先对所有明文信息做散列计算，生成一个信息摘要值，之后CA使用自己的私钥对该摘要值进行加密，密文即CA的数字签名。 数字证书发给服务器，当客户端请求https访问服务器资源时，服务器将该证书发给客户端。 客户端上预装CA的根证书，其中包含CA的公钥，客户端先使用相同的散列算法对证书中的明文信息做散列计算，得到一个摘要值，之后使用CA公钥将证书中的签名解密，得到原本的摘要值，将两个值进行比较，若相同，则信任该证书。 ","date":"2019-01-06","objectID":"/2019-01-06-the-process-of-https/:2:0","tags":["https","安全"],"title":"HTTPS原理","uri":"/2019-01-06-the-process-of-https/"},{"categories":["饭碗"],"content":"前言 由于偶然在群中有人聊起如何抓包https，从而找了一下有什么方法可以实现。 查到Charles这个工具可以实现https的抓包，而且可以查看其中的的数据内容。主要的原理为中间人代理（就是中间人攻击）。 因为https是加密数据的，所以使用正常抓包方法即时可以抓到数据包，也无法像http一样查看其中的内容。 Charles是拦截https的数据包，并使用自己的证书来伪装成服务器的证书发给客户端来完成认证，那么对此就有一个问题，既然中间人可以这么轻易拦截报文并伪装，怎么还能保证https的安全性呢，认为突破点在于对证书的信任验证。 ","date":"2018-12-29","objectID":"/2018-12-29-ca-certificate-and-middleman-attack/:1:0","tags":["安全","https"],"title":"CA证书与中间人攻击","uri":"/2018-12-29-ca-certificate-and-middleman-attack/"},{"categories":["饭碗"],"content":"主机对CA证书的信任 当客户端与服务器使用https进行通信的时候，客户端对发来的ca证书肯定是会进行验证的，如果验证不可信，浏览器就会提醒用户该网站不可信。那么想要达到可信的效果，中间人只有两个办法，一个是强制将自己的证书安装在客户端上，第二个就是要伪造成原服务器的证书。 正常的数字证书中还包括ca机构对该证书的签名（使用ca公钥加密），如果有改动，当浏览器对篡改后的信息进行校验就会不通过，所以如果我们使用第二种方法进行伪造，有一个解决办法就是让证书尽量看起来是ca颁发的，我们可以用我们随机生成的密钥对来做自签发的证书，这样在客户端的浏览器上依然会出现证书不信任的字样，但是当用户查看过证书的内容后，极有可能会选择信任该证书。 对于检查证书严格的情况，此方法也不能成功，所以在一定程度上来讲，https还是比较安全的。 猜测中间人使用合法的CA证书是否可以直接信任，后来发现即使最简单申请的DV证书，也是基于域名申请的，此方法当然行不通。 ","date":"2018-12-29","objectID":"/2018-12-29-ca-certificate-and-middleman-attack/:2:0","tags":["安全","https"],"title":"CA证书与中间人攻击","uri":"/2018-12-29-ca-certificate-and-middleman-attack/"},{"categories":["饭碗"],"content":"对于访问网站获取CA证书与缓存 在此发现一个问题，操作系统安装或浏览器安装的时候，经常会默认安装一些CA机构的根证书，但是对这些机构颁发的具体网站的证书没有导入系统。 我们测试在新安装系统上访问一个https的网站，发现https是正常的，说明证书校验通过，但是检查系统的ca证书库中并没有导入这个网站的证书，在访问的过程中也没有提示需要导入证书。 对于这个问题，解释是，当系统安装了一个CA机构的根证书，对于该证书链下的所有经过CA颁发的证书都会信任，但是并不会在系统中保存这个证书。服务器在每次https握手阶段都会发送证书，为了加快握手的速度，降低资源消耗，有一种说法是缓存的是TLS的会话信息。 来源：腾讯 为了加快建立握手的速度，减少协议带来的性能降低和资源消耗，TLS协议有两类会话缓存机制：会话标识Session ID与会话记录Session Ticket。 Session ID由服务器端支持，协议中的标准字段，因此基本所有服务器都支持，服务器端保存会话ID以及协商的通信信息，Nginx中1M内存约可以保存4000个Session ID机器相关信息，占用服务器资源较多； Session Ticket需要服务器和客户端都支持，属于一个扩展字段，支持范围约60%（无可靠统计与来源），将协商的通信信息加密之后发送给客户端保存，密钥只有服务器知道，占用服务器资源很少。 二者对比，主要是保存协商信息的位置与方式不同，类似于http中的session于cookie。 二者都存在的情况下，优先使用session_ticket（Nginx实现）。 ","date":"2018-12-29","objectID":"/2018-12-29-ca-certificate-and-middleman-attack/:3:0","tags":["安全","https"],"title":"CA证书与中间人攻击","uri":"/2018-12-29-ca-certificate-and-middleman-attack/"},{"categories":["饭碗"],"content":"问题 centos7中没有pts/0和pts/3？ ","date":"2018-12-29","objectID":"/2018-12-29-tty-and-pts-of-linux/:0:1","tags":["linux"],"title":"Linux系统中的tty与pts","uri":"/2018-12-29-tty-and-pts-of-linux/"},{"categories":["饭碗"],"content":"tty、pty与pts的概念 tty（终端设备的统称） tty源于Teletypes，原指电传打字机，现在指终端比较合适（应该是属于终端设备） pty（虚拟终端） 当使用远程到主机的时候，就需要用到虚拟终端 pts/ptmx（pts/ptmx结合使用，进而实现pty） pts（pseudo-terminal slave）是pty的实现方法，和ptmx（pesude-terminal master）配合使用实现pty ","date":"2018-12-29","objectID":"/2018-12-29-tty-and-pts-of-linux/:0:2","tags":["linux"],"title":"Linux系统中的tty与pts","uri":"/2018-12-29-tty-and-pts-of-linux/"},{"categories":["饭碗"],"content":" 从virtualbox打包来的ova格式镜像，发现无法在kvm上直接使用，会提示镜像无法引导，因为kvm使用的虚拟磁盘格式多数都是qcow2的，所以应该可以将ova转成该格式。 其实ova格式是使用tarball打包的，用file命令就可以验证。 ~ $ file Evergreen_trunk_Squeeze.ova Evergreen_trunk_Squeeze.ova: POSIX tar archive (GNU) 所以直接解压文件就可以，解压后一般会得到一个原来的磁盘格式和一个ovf文件，qemu自带工具就可以转换格式。 ~ $ qemu-img convert -O qcow2 Evergreen_trunk_Squeeze-disk1.vmdk Evergreen_trunk_Squeeze.qcow2 ","date":"2018-11-27","objectID":"/2018-11-27-import-a-kvm-image-using-ova/:0:0","tags":["kvm","虚拟化"],"title":"kvm使用ova导入虚拟机镜像","uri":"/2018-11-27-import-a-kvm-image-using-ova/"},{"categories":["饭碗"],"content":"802.1X过程 ","date":"2018-11-19","objectID":"/2018-11-19-802.1x/:1:0","tags":["802.1X"],"title":"802.1X学习","uri":"/2018-11-19-802.1x/"},{"categories":["饭碗"],"content":"协议 客户端PAE和设备端PAE之间，EAP协议使用EAPoL格式封装，直接承载于LAN环境中。 设备端PAE和Radius服务器之间，EAP可以用EAPoR封装，承载于Radius协议中（中继方式）；也可以由设备端PAE终结，在设备端PAE和Radius服务器之间使用PAP或CHAP协议（终结方式）。 ","date":"2018-11-19","objectID":"/2018-11-19-802.1x/:1:1","tags":["802.1X"],"title":"802.1X学习","uri":"/2018-11-19-802.1x/"},{"categories":["饭碗"],"content":"认证过程 客户端初始化，可以由客户端或交换机发起，若交换机端口设置了802.1x，在端口重启时，交换机开始建立认证会话（交换机使用组播报文触发）。也可以由客户端发起认证会话（交换机收到MAC地址若不在802.1x会话维护的MAC地址列表中，交换机将发送单播报文触发认证，一般在multi-auth模式下）。 还有dhcp发送EAP-Start报文触发，Winxp自带802.1x客户端就是用dhcp触发。 客户端会收到请求帧（EAP-Request/Identify）要求用户的客户端程序发送用户名。 客户端发送用户名给交换机，交换机将数据帧经过封包处理后发送给Radius服务器。 Radius服务器收到用户名信息，与数据库中的用户名表相对比，找到该用户名对应的口令，用一个随机生成的加密字段对他进行加密，同时加密字段也发送给交换机（Access-Challenge报文），交换机再转发给客户端。 客户端程序收到加密字段，用该加密字段对口令进行加密，发送给交换机再由交换机发送给Radius服务器。 Radius服务器将两个加密过的信息比对，若正确，则交换机改变端口授权，允许用户接入网络。 ","date":"2018-11-19","objectID":"/2018-11-19-802.1x/:1:2","tags":["802.1X"],"title":"802.1X学习","uri":"/2018-11-19-802.1x/"},{"categories":["饭碗"],"content":"注意 若终端被判断为无客户端，则交换机检查端口是否配置了MAB（MAC Authentication Bypassa）。 若启用重认证，在认证到期后会重新开始认证。 802.1x的端口在获得授权后，端口的状态就不会再受客户端和Radius的影响，除非出现： 重认证计时器过期 终端发送EAPOL logoff终止802.1x会话 端口重启 握手失败 华为/H3C交换机在端口改为授权状态后，会定期发送握手包给客户端，以便对客户端的在线状况进行监视。缺省情况下，两次握手包没有回应就会让客户端下线，但这个功能只有华为/H3C交换机并安装他们自己的客户端才支持。 ","date":"2018-11-19","objectID":"/2018-11-19-802.1x/:1:3","tags":["802.1X"],"title":"802.1X学习","uri":"/2018-11-19-802.1x/"},{"categories":["饭碗"],"content":"端口授权与非授权状态 认证未通过时，端口状态为unauthorized状态，端口不允许cdp、spanning tree、EAPOL外的所有流量通过。 认证通过后，端口状态变为authorized，所有协议都允许通过。 端口状态命令：dot1x port-control force-authorized|force-unauthorized|auto ","date":"2018-11-19","objectID":"/2018-11-19-802.1x/:2:0","tags":["802.1X"],"title":"802.1X学习","uri":"/2018-11-19-802.1x/"},{"categories":["饭碗"],"content":"定时器 握手定时器（handshake-period）（Cisco没有） 静默定时器（quiet-period） 重认证定时器（reauth-period） Radius服务器超时定时器（server-timeout） 客户端认证超时定时器（supp-timeout）（有802.1x客户端的情况） 定时器决定了各组件之间报文的重传间隔，在一些环境下，定时器对802.1x的认证结果和终端上应用协议的使用会产生根本性影响。 ","date":"2018-11-19","objectID":"/2018-11-19-802.1x/:3:0","tags":["802.1X"],"title":"802.1X学习","uri":"/2018-11-19-802.1x/"},{"categories":["饭碗"],"content":"PAE（Port Access Entity，端口访问实体） PAE是认证机制中负责执行算法和协议操作的实体，也就是设备端和客户端都要有PAE才能进行认证。 设备端PAE负责对用户进行认证，并根据结果对端口授权状态进行控制。 客户端PAE负责响应设备端的认证请求，向设备提交用户的认证信息，也可以主动向设备端发送认证请求和下线请求。 ","date":"2018-11-19","objectID":"/2018-11-19-802.1x/:4:0","tags":["802.1X"],"title":"802.1X学习","uri":"/2018-11-19-802.1x/"},{"categories":["饭碗"],"content":"受控与非受控端口 逻辑概念，客户端接入的端口被划分为两个逻辑端口，任何到达该端口的帧，在受控与非受控端口上均可见。 非受控端口始终处于双向连通状态，主要用来传递EAPoL协议帧，保证客户端始终能收发认证报文。（只允许EAPoL、CDP、Spanning-Tree协议通过） 受控端口只在授权状态下处于双向连通，用于传递业务报文，在非授权状态下禁止收发任何报文。 在非授权状态下，受控端口可以被设置成单项受控和双向受控： 单项受控，禁止从客户端接受帧，但允许向客户端发送帧。 双向受控，禁止帧发送和接收。 端口受控方式：基于端口的认证和基于MAC地址的认证。 基于端口的认证：只要该物理端口下第一个用户认证成功后，其他接入的用户无需认证就可以访问网络资源。但当第一个用户下线后，其他用户也无法接入网路。 基于MAC认证：端口下所有的接入用户均需要单独认证。（这里的用户应理解为主机？） ","date":"2018-11-19","objectID":"/2018-11-19-802.1x/:5:0","tags":["802.1X"],"title":"802.1X学习","uri":"/2018-11-19-802.1x/"},{"categories":["饭碗"],"content":"MAB MAB是MAC-authentication-bypass的缩写 适用于未安装802.1x客户端的情况下，通过主机的MAC地址进行认证。 比如打印机可以用MAB接入到启用了802.1x的交换机端口上。 在终端的EAPOL Response达到指定次数和时间未送到交换机时，就会启用MAB。 交换机抓取终端的以太报文，提取MAC地址作为认证ID，Radius数据库中存放了可授权MAB的地址列表。 ","date":"2018-11-19","objectID":"/2018-11-19-802.1x/:6:0","tags":["802.1X"],"title":"802.1X学习","uri":"/2018-11-19-802.1x/"},{"categories":["涉读电影"],"content":"起因 前天去看了期待已久的电影的点映，对于我这种经常独自去影院看电影的人来说，已经不会再感觉到一个人坐在座位上的尴尬了。但是在观影过程中，依然会有尴尬的事情发 生，而且是我替别人感到尴尬的事。 看电影的人大都聚集在周末，有时候再没什么比和亲朋一起看个电影更开心的事了。在影院里人们总是成群结队的来，又成群结队的走，家长带着小孩子更是常事，基本上 各个放映厅能看到这么一家子。小孩子确实活泼可爱，但是电影院和其他地方可不一样，像商场公园什么的，人多嘈杂，小孩子再怎么疯再怎么闹，其他人也只是一笑而过， 可在这你试试，有时说句话都会遭斥责，何况那么多人都安静的看电影，你怎么好意思打扰别人。 那天的情况，电影开场的时候，放映机的灯光下我看到了四个人的影子–小两口带着两孩子，他们在我的前一排坐下了，当时确实有点担心，因为这电影并不适合小孩子看， 会不会中间因为无聊或其他的因素而打扰到别人，后来也确实发生了，小孩子滔滔不绝地说着，而且并不会自己去控制说话的音量，结果更前面的一个哥们忍不住了，说了一 句，话比较客气但情绪很气愤，家长倒也知道是自己不对，不去反驳，去哄孩子让他小点声，我看着这放映厅里的另一出戏，还真替那父母感到尴尬。这事情虽小，但对于专 心看电影的我们来说确实是会影响心情的，这是谁都不希望的。 ","date":"2018-07-02","objectID":"/2018-07-02-the-viewpoint-about-kids-in-cinema/:1:0","tags":["电影"],"title":"带小孩子进电影院看电影的正确方式","uri":"/2018-07-02-the-viewpoint-about-kids-in-cinema/"},{"categories":["涉读电影"],"content":"分析 要说以前去看电影，也经常碰到带小孩的家长，不过看那种合家欢式的电影的话，影厅里气氛比较活跃，也就少有人在乎小孩子吵了，就怕看严肃的电影的时候有小孩子突然 冒出一句话来，马上就出戏了，对于影迷来说心里有多烦闷想想都知道。 虽然这种事并不会引起多么大的后果，但是我们每个人都不想在全神贯注看电影的时候突然被别人说话打断一下（至少我是这样的）。而且对于带小孩的家长来说，影响了别 人，自己尴尬不说，哄孩子的功夫都不能好好看电影了，本来花钱是求享受的，最后也闹得不开心，又是何苦呢。 不过回过头来想想，这种事也不能全怨家长，本来周末就是全家出去玩的黄金时间，突然来兴致了一起去看个电影，也不能把孩子扔下。但是家长这之前确实应该有所考虑， 不是什么电影都可以让孩子看的，在决定看什么电影之前，我觉得还是要花点时间去了解一下这部电影，而且现在的电影多数质量不怎么样，宣传倒是下了不少功夫，海报、 预告片什么的做的非常吸引人，可能家长只是看了这些表面的东西，就决定了是否带孩子去看，结果看着看着出现了一个少儿不宜的东西，或者家长看的津津有味，孩子觉得 无聊，一会儿说句话，一会乱走几步，打扰了别人，家长还得来管，这确实都是不必要的麻烦。 我国现阶段的电影放映制度是没有明确分级的，即使有少数电影公司考虑到了电影的内容实在太不适合低年龄段，会自行在海报上打出不宜字样，但这毕竟是少数，多数公司 为了电影的利益还是不会做说明的，就像前不久的《红海行动》，宣传的是爱国主义，其实拍的是残酷的战争，充斥着血腥，这种电影虽然有一定的爱国教育意义，但是里面 有些场景男生都会不适，你让小孩和女生（大多数）看这种电影，未免就要挨骂了。 ","date":"2018-07-02","objectID":"/2018-07-02-the-viewpoint-about-kids-in-cinema/:2:0","tags":["电影"],"title":"带小孩子进电影院看电影的正确方式","uri":"/2018-07-02-the-viewpoint-about-kids-in-cinema/"},{"categories":["涉读电影"],"content":"总结 所以在官方机构不能给家长一个观影指导的情况下，肯定就要家长自己去了解了，毕竟父母才是孩子最好的老师，电影分级制度里不是也有一个“在家长的指导下观看”吗，这 是其一，其二，在平时的时候家长也应该多指导孩子不应在一些场合下大声喧哗，知道哪些地方需要安静，即使说话也不要影响别人。这些自律的行为有时候并不是自然形成 的，还是需要正确的指导与教育。 本人只是以一个影迷的角度来看这件事，写这篇短文只是把我看到的我想到的记录下来，仅此而已。 ","date":"2018-07-02","objectID":"/2018-07-02-the-viewpoint-about-kids-in-cinema/:3:0","tags":["电影"],"title":"带小孩子进电影院看电影的正确方式","uri":"/2018-07-02-the-viewpoint-about-kids-in-cinema/"},{"categories":["饭碗"],"content":"学习Linux运维的过程中，对于一些常见的服务的搭建是必不可少的，FTP是我们经常使用的文件传输协议，在Linux上我们用vsftpd来搭建FTP服务器。 ","date":"2018-02-25","objectID":"/2018-02-25-learning-vsftpd/:0:0","tags":["ftp","linux"],"title":"vsftpd学习","uri":"/2018-02-25-learning-vsftpd/"},{"categories":["饭碗"],"content":"安装 安装自然不必多说，在RHEL上使用yum可以轻松安装该软件。 为了测试过程中不会因为防火墙阻挡而影响结果，可以先清空防火墙的规则。 在vsftpd的配置文件里已经有了大多数的常见配置，并对相关语句做了注释，因此对于平常使用来说可以很容易的实现。 下面我们尝试用匿名登录FTP服务器。 ","date":"2018-02-25","objectID":"/2018-02-25-learning-vsftpd/:1:0","tags":["ftp","linux"],"title":"vsftpd学习","uri":"/2018-02-25-learning-vsftpd/"},{"categories":["饭碗"],"content":"登录 需要修改的配置有以下几条： 1 anonymous_enable=YES 2 anon_umask=022 3 anon_upload_enable=YES 4 anon_mkdir_write_enable=YES 5 anon_other_write_enable=YES 注意：每次修改完配置后都需要重启vsftpd服务才能生效。 配置保存，重启服务后，可以在本机上使用ftp登录（配置中的local_enable表示是否允许本机登录），在输入用户名的时候选择anonymous，密码为空。 此时可以登录成功，但是无法创建目录，原因为匿名登录的默认目录为/var/ftp/，通过查看目录我们可以发现，该目录的所有者和群组都是root，而我们需要将所有者改为 ftp才能有该目录的写权限，所以使用chown修改目录所有者。 此时再使用ftp尝试匿名登录，发现报错： 500 OOPS: vsftpd: refusing to run with writable root inside chroot() Login failed. 421 Service not available, remote server has closed connection ","date":"2018-02-25","objectID":"/2018-02-25-learning-vsftpd/:2:0","tags":["ftp","linux"],"title":"vsftpd学习","uri":"/2018-02-25-learning-vsftpd/"},{"categories":["饭碗"],"content":"分析报错并解决 对于此报错，是chroot的策略导致的，在配置文件的注释中也有讲解： You may specify an explicit list of local users to chroot() to their home directory. If chroot_local_user is YES, then this list becomes a list of users to NOT chroot(). (Warning! chroot’ing can be very dangerous. If using chroot, make sure that the user does not have write access to the top level directory within the chroot) FTP中有chroot功能，意思是在用不同的用户登录的时候访问目录将限制在该用户的家目录中，也就是除了用户的家目录不能访问其他目录，但是使用该功能的前提是用户 不能对自己的家目录有写权限，这也是上面报错的原因（/var/ftp的权限为755）。 因此，只要将/var/ftp的权限改为555或将该目录的所有者改为root，之后在二级目录中操作文件的增删改查就可以了。 对于anonymous来说，任何情况下都开启chroot。 ","date":"2018-02-25","objectID":"/2018-02-25-learning-vsftpd/:3:0","tags":["ftp","linux"],"title":"vsftpd学习","uri":"/2018-02-25-learning-vsftpd/"},{"categories":["饭碗"],"content":"chroot的探索 chroot功能可以使用chroot_local_user语句来开启或关闭（针对所有有权限登录的本地用户），除此之外，也可以在关闭的状态下使用chroot_list_enable来选择为哪些用 开启。 正如配置说明中所说，当chroot为关闭状态下，设置list可以实现为用户单独开启chroot，而在chroot开启的状态下，设置list就变成了为用户单独取消chroot。 虽然软件在这方面做了严格限定，但是要取消家目录的写权限实在是不方便，所以配置中还给出了一条语句allow_writeable_chroot，将其设置为YES，就可以在用户对 其家目录保留写权限的情况下使用chroot。 ","date":"2018-02-25","objectID":"/2018-02-25-learning-vsftpd/:4:0","tags":["ftp","linux"],"title":"vsftpd学习","uri":"/2018-02-25-learning-vsftpd/"},{"categories":["涉读电影"],"content":"起因 前一阵突然想起这个问题，具体原因忘了，不过对于电影院的这一做法，我还是深有体会的：每次只要一放到片尾，立马就开灯，一秒钟都不耽误，而观众也是习惯性的都起身准备走，就算有几位还坐在座位上，也待不过一分钟，然后就很简单了，直接关掉放映，管理人员开始清场。 最近印象比较深的还是一次去看《战狼2》，因为片尾字幕过后还有一段彩蛋，里面包含了未完待续的内容，结果因为影院没有放完就没看到。 ","date":"2018-01-14","objectID":"/2018-01-14-film-cast-list/:1:0","tags":["电影"],"title":"为电影夺回片尾","uri":"/2018-01-14-film-cast-list/"},{"categories":["涉读电影"],"content":"感受 这肯定不是最近几年才出现的状况，甚至在我的记忆中，小学学校组织看电影的时候貌似就是这样了，所以至少十几年前影院就有了这个“传统”。如果说这是如今快节奏生活导致的，那么当年的电影市场还没有像现在这样膨胀，没有那么多的快餐电影，出现这种问题也是不应该的。 这个问题的根源肯定也不好说了，不过可以肯定的一点是，现在去问影院这么做的动机，他们肯定会扔给你一句“别的影院都这么做，我也这么做呗”。现在电影几乎完全沦为人们娱乐的消费品了，观众看电影也很少是为了”电影“，更多的是为了”看“，甚至看都是次要的，约妹子才是正事。观众的观影要求越來越低，所以像有看完片尾这种常人看来是”强迫症”行为的观众，影院才不会去照顾你呢。 相信这个问题也不是没有人去反映，但是人家是照顾绝大多数人的喜好，就算你去说效果也是微乎其微。这种做法不仅是不考虑影迷的感受，而且还是一种欺骗消费者的行为，因为我们买一张电影票的价值是一整部电影的时长，我们自然有权看完一整部时间的电影，不能因为多数人不看就不去放完那五分钟的片尾。不过现在这种说法貌似也失去了说服力，因为最近几年很多影院开始让观众提前入场，而且在正式放映之前加入了近五分钟的广告，这样就算拿时长来说事，人家也有自己的说法。当然，这只是根据我观察到的现象做的一种猜测。 ","date":"2018-01-14","objectID":"/2018-01-14-film-cast-list/:2:0","tags":["电影"],"title":"为电影夺回片尾","uri":"/2018-01-14-film-cast-list/"},{"categories":["涉读电影"],"content":"我的经历 电影的片尾的确没有什么信息量，但是维护一部电影作品的完整是我们每一个观众都应该做的，片尾也是电影的一部分，片尾字幕的每一个名字都应该被列出来，因为他们都为了这部作品做出了贡献。我个人还是尽量去看完每一部电影的片尾，即使是英文或其他外语的电影，在看不懂字幕的情况下，我也是把片尾音乐听完才离开。 说到这种“强迫症”，也是不知不觉中养成的。我最开始“关注”电影应该是在2007年的《集结号》，当时比较小，这种拍摄手法看得眼花缭乱，不过印象很深，当时也刚接触互联网，就看了下电影的演职员，之后看电影也是这样。还有印象比较深的是2009年的《南京！南京！》，看完这么沉重的一部电影，在结尾字幕出现“陆川导演作品”的时候，我突然有了一种肃然起敬的感觉，突然觉得创作者对于一部作品来讲是这么重要，而且是每一个人都这么重要。也是从那之后，我对电影的演职员表有了很大的兴趣，几乎每一部电影都会看，有时候看到了熟悉的名字就有一种莫名的兴奋：“哦，居然是他（她）”。 人们太多只是看到演员们演出来的电影，却忘了幕后那么多人的付出，都是不容易的。 ","date":"2018-01-14","objectID":"/2018-01-14-film-cast-list/:3:0","tags":["电影"],"title":"为电影夺回片尾","uri":"/2018-01-14-film-cast-list/"},{"categories":["涉读电影"],"content":"总结 电影本身是艺术作品，即使变成了消费品，它的本质也不应该被改变，更不应该被破坏。所以，不管你是不是影迷，请尊重一部电影。 ","date":"2018-01-14","objectID":"/2018-01-14-film-cast-list/:4:0","tags":["电影"],"title":"为电影夺回片尾","uri":"/2018-01-14-film-cast-list/"},{"categories":["生活多美好"],"content":" HTPC（Home Theater Personal Computer），即家庭影院电脑。 是以计算机担当信号源和控制的家庭影院，也就是一部预装了各种多媒体解码播放软件，可用来对应播放各种影音媒体，并具有各种接口，可与多种显示设备如电视机、投影机、等离子显示器、音频解码器、音频放大器等音频数字设备连接使用的个人电脑。 ","date":"2017-11-03","objectID":"/2017-11-03-design-of-htpcv1.0/:0:0","tags":["媒体中心"],"title":"家用HTPC方案v1.0","uri":"/2017-11-03-design-of-htpcv1.0/"},{"categories":["生活多美好"],"content":"之前使用树莓派的方案与局限性 之前因为手头有闲置树莓派所以暂时将其作为pt下载机，并由此做出搭建家用HTPC的临时方案。 临时方案很简单，树莓派主要任务为pt下载，之后连接带电源的硬盘盒作为文件存储服务器，电视通过内网连接并读取文件或播放视频。 由此可见该方案的局限性： 树莓派功耗较低，但是通过usb无法带起大硬盘正常工作，需要硬盘独立供电。 树莓派自身cpu与内存空间有限，在后台运行大量进程后资源吃紧。 由于剩余资源较少，无法再额外提供高清视频解码功能。 树莓派无法解码视频，电视只能通过内网传输并自身解码播放视频，因此很受网络速率与自身解码器性能的影响（树莓派不支持h265高清视频）。 因此，当使用需求增多后，该临时方案将不能满足。需搭建性能强，耗电少，可扩展性高的HTPC主机。 ","date":"2017-11-03","objectID":"/2017-11-03-design-of-htpcv1.0/:1:0","tags":["媒体中心"],"title":"家用HTPC方案v1.0","uri":"/2017-11-03-design-of-htpcv1.0/"},{"categories":["生活多美好"],"content":"需求 支持各种常见媒体格式的解码播放，支持h265硬解码，甚至4K视频播放。 有足够空间安装3.5寸台式机大硬盘，可以存储大量文件并通过局域网共享。 主机需直接通过HDMI线连接到客厅电视，以避免局域网速率限制视频流传输。 要求操作界面简洁方便，容易上手。 可以保证长期稳定运行而且耗电量低。 支持bt下载与迅雷下载。 支持内外网环境下远程管理。 主机体积足够小，可以随意放置。 可选：游戏需求，可以流畅运行一些非大型游戏。 ","date":"2017-11-03","objectID":"/2017-11-03-design-of-htpcv1.0/:2:0","tags":["媒体中心"],"title":"家用HTPC方案v1.0","uri":"/2017-11-03-design-of-htpcv1.0/"},{"categories":["生活多美好"],"content":"方案设计 ","date":"2017-11-03","objectID":"/2017-11-03-design-of-htpcv1.0/:3:0","tags":["媒体中心"],"title":"家用HTPC方案v1.0","uri":"/2017-11-03-design-of-htpcv1.0/"},{"categories":["生活多美好"],"content":"硬件方面 对于如今家用HTPC的搭建方案，已经有很多比较完善的例子，不过还是要根据自身需求来选择硬件。 主板及处理器 华擎科技 J3455-ITX：539RMB 在现有的例子中，intel推出的新一代赛扬处理器是最为用户津津乐道的，因为他具备了低功耗与高性能的特点，其自带的核心显卡可以完美硬解h265甚至4K视频，无疑是现阶段最好的选择。有数家主板厂商推出了集成该处理器的ITX迷你主板，接口功能齐全，价格也适中。 内存 金士顿KVR16LS11/4 KST 4G DDR3 1600L（二手）：145RMB 华擎科技的官方网站上提供了J3455-ITX主板所支持的内存型号（有很多网友吐槽其内存兼容性，其实并不是主板兼容问题，而是处理器的问题），所以在考虑到现今内存条价格疯涨的特殊情况，决定使用二手内存条，可以节省近50元。 硬盘 士必得 M3-32G固态硬盘（附带数据线与台式机托架）：106RMB SSD固态硬盘，用来做系统盘，既然需求不高也无需买高端产品，满足日常使用即可。 机箱 祐泽海洋之星+标配1U电源250W：135RMB 在所有物品中，机箱是找的时间最长的，因为个人原因，第一不喜欢机箱体积过小导致使用DC外置电源，第二不喜欢体积过大像一般台式机一样的，第三考虑到预算决定将机箱价格控制在200以内，所以放弃了之前最中意的乔思伯品牌（个人认为乔思伯的外观是最好的，大小也可以接受，只是价格偏高）。最后决定用海洋之星，这机箱应该是价格最便宜的了，由于体积原因只能使用服务器1U电源，不过还好内部空间足够大，还特意向卖家请教了一些空间利用的方法。 硬件预算总计（不包括其他配件）：930RMB ","date":"2017-11-03","objectID":"/2017-11-03-design-of-htpcv1.0/:3:1","tags":["媒体中心"],"title":"家用HTPC方案v1.0","uri":"/2017-11-03-design-of-htpcv1.0/"},{"categories":["生活多美好"],"content":"软件方面 硬件的性能固然重要，但是用户体验更重要，因此软件方面必须做到界面友好，操作简单，尽量让用户体验做到最好。 操作系统 Lubuntu 16.04LTS 操作系统第一个不会考虑windows，虽然在软件兼容性和用户界面上win比较好，但是会带来高占用资源和各种垃圾软件病毒的问题，所以还是选择用基于Linux的系统，也方便远程控制。Ubuntu是再熟悉不过的系统了，使用LXDE轻量级桌面在资源占用上会更低。 主板说明书上只标明Linux操作系统支持Ubuntu 16.10，之后要具体测试一下。 2017-11-12更新：事实证明，Ubuntu近期的版本（目前只试过LXDE和Unity桌面），在安装上之后无法通过HDMI接口输出声音，各种软件设置均无效，这种情况同样发生在Debian（Xfce桌面）系统上。目前Windows10和Fedora（Gnome桌面）测试无问题（或为桌面环境导致），而且在Windows10环境下资源占用较高，因此暂时使用Fedora系统，有待进一步观察是否出现问题。 2017-11-26更新：上述问题已排查，因为之前测试Kodi环境下插移动硬盘不能自动挂载（需要添加自动挂载策略），所以为了方便就在fstab文件中添加了开机自动挂载移动硬盘的条目，但是如果开机检查该文件发现硬盘没有连接，将无法正常启动系统，也就是上述问题的所在，所以删除该条目就可以解决。 媒体中心 Kodi v17.5 “Krypton” 作为一款开源媒体中心项目，可以说Kodi已经集成了所有你可能想到的功能，支持所有平台，而且提供了强大的可扩展的插件库，可以自己制作也可以使用他人制作的插件来实现各种功能。而且对媒体格式的支持也是很完美，支持媒体信息搜刮器，个人觉得是搭建个人媒体库的不二选择。 由于Kodi基于Ubuntu的KODIbuntu系统貌似已经停止更新，所以选择以软件形式安装。 虽然Kodi的插件功能很强，但是中文插件资源依然很少，其中一方面原因也是因为源网站对其的封堵，导致很多插件已经失效并停止更新。 其他软件 基础操作系统为Linux，所以在这里使用SSH进行远程操作，Samba服务负责局域网文件共享，n2n负责内网穿透方便外网远程控制，Deluge进程负责pt下载。 如果有需求，可以使用虚拟机安装windows，方便使用迅雷下载或其他需要win平台的软件。 ","date":"2017-11-03","objectID":"/2017-11-03-design-of-htpcv1.0/:3:2","tags":["媒体中心"],"title":"家用HTPC方案v1.0","uri":"/2017-11-03-design-of-htpcv1.0/"},{"categories":["生活多美好"],"content":"方案实施 方案已经确定，理论上没有太多问题，但是在实施的过程中，会因为各种因素导致过程不顺利，因此在实施的过程中将会有许多问题待解决。 ","date":"2017-11-03","objectID":"/2017-11-03-design-of-htpcv1.0/:4:0","tags":["媒体中心"],"title":"家用HTPC方案v1.0","uri":"/2017-11-03-design-of-htpcv1.0/"},{"categories":["生活多美好"],"content":"硬件方面 硬件方面无太多变动，安装过程也没有太多阻碍，只是机箱的空间与预计较为不同，原本计划在其他硬件安装完毕之后还可以在机箱侧壁以两颗螺丝固定一块3.5寸大硬盘，但实际测量发现cpu散热片超过预想的高度，导致剩余空间可能不足以放下一块大硬盘。 对于固态硬盘的安放也与预期相差较多，机箱顶盖有固定固态硬盘的位置，但是考虑到过后还要在那个地方安放其他硬盘所以决定将其放入电源下面的空间里，然而固态硬盘配套的螺丝根本不符合其自身螺丝孔，而且机箱侧面的圆形散热孔不能完美对上硬盘侧面的两个螺丝孔，所以只能更换其他螺丝并且使其中一颗螺丝斜着拧入。 机箱散热风扇由于没有测量顶盖的风扇位置大小而错买了，尝试过用双面胶粘贴，但发现使用一段时间会掉，所以只能用一颗螺丝固定在顶盖上，还好效果没有那么差。 其他硬件并没有发现兼容问题，一次性点亮，只是连接我的便携式显示器的时候必须用一根充电线把显示器和机箱连接起来才不会有问题，使用外接电源就是不亮，有可能与机箱漏电有关，希望接到电视上不会出现此问题。 ","date":"2017-11-03","objectID":"/2017-11-03-design-of-htpcv1.0/:4:1","tags":["媒体中心"],"title":"家用HTPC方案v1.0","uri":"/2017-11-03-design-of-htpcv1.0/"},{"categories":["生活多美好"],"content":"软件方面 实施过程最让人头疼的就是软件问题，对于Linux系统来说，兼容问题远比Windows系统多的多（尤其对这种较新的硬件，主板说明书上也标明推荐Windows10）。 首先是按照原方案中提到的Ubuntu（LXDE桌面），安装上后并没有发现有其他问题，但是在kodi安装上之后测试才发现HDMI无法输出声音，在网上也有很多教程解决此问题，但是均不起作用。其一，教程中大多是对于Ubuntu原版系统，会导致桌面环境影响；其二，很有可能是因为操作系统对该硬件存在兼容问题。 2017-11-26更新：对于HDMI声音输出问题，目前决定暂时放弃。 之后在尝试过其他版本的Lubuntu后决定暂时放弃该系统，同时也断定是系统的问题，那么就按照主板说明书上提到的Fedora 25系统来测试，没想到这个系统就没有声音输出的问题了，而且其使用的Wayland显示服务器比传统的X服务器更顺畅，只不过相对资源占用较大（但还是甩win10几条街）。 Fedora系统安装Kodi与Debian系的完全不一样，不过Fedora使用的源包含的组件更加全面，不需额外下载其他组建。安装完Kodi之后在登录桌面环境中都有一个单独的Kodi环境，也就是不需依赖其他桌面环境运行，相对更省资源。 不过Fedora系统之后也出现了问题，在一次测试中播放视频突然黑屏，显示器忽亮忽暗，而且只要退出Kodi全屏播放模式就恢复了（此问题是在单独Kodi环境下，也就是standalone环境下发生的），之后尝试过更改显示屏刷新率但是没有效果，不过发现只要将输出模式改为1920X1080i就恢复正常了。还要说明一点，在Gnome环境下运行Kodi不会出现此问题。 期间也尝试过Debian（Xfce桌面），Ubuntu16.04，Windows10。Debian就和Ubuntu一样了，都存在没有声音的问题，不过不得不说win10是问题最少的，但是使用win10的话就面临三个问题：未必永久激活，资源占用大，远程控制困难。所以现在还是选择拯救者Fedora。 2017-11-26更新：系统方面最终决定使用Ubuntu。 对于Kodi的设置就没有过多想说的了，怎么使用舒服简单就怎么设置，而且Kodi使用手机遥控还是很好用的，感觉真的是开箱即用。 ","date":"2017-11-03","objectID":"/2017-11-03-design-of-htpcv1.0/:4:2","tags":["媒体中心"],"title":"家用HTPC方案v1.0","uri":"/2017-11-03-design-of-htpcv1.0/"},{"categories":["生活多美好"],"content":"总结 个人来说算是第一次完整装机，从查阅资料到选择配置再到组装和系统调试，大概断断续续花费了一个多月的时间。有时候对于方案的设计还是存在很多欠考虑的地方，比如这次机箱空间的计算，还有系统方面的各种问题。。也可能因为这次装机用途比较特殊，毕竟不是主流电脑配置，所以有很多地方无法找到有用的资料，而且也预计不到结果如何，导致过程中会出现种种问题，不得不说弄起来真的很累。。 不过有些时候学习就是一些事情逼出来的，装机过程还是可以学到很多东西的，还要注意很多细节。装机也是门手艺，弄好了也是很了不起的哦~ 估计接下来我又要折腾一台迷你主机了，真的会上瘾的。。 ","date":"2017-11-03","objectID":"/2017-11-03-design-of-htpcv1.0/:5:0","tags":["媒体中心"],"title":"家用HTPC方案v1.0","uri":"/2017-11-03-design-of-htpcv1.0/"},{"categories":null,"content":"环境 VMWare虚拟机3台 CentOS 7.9 Minimal Docker 20.10.9 k8s 1.24.3 主机名 规格 IP k8s-master 2c-2g-40g 192.168.36.100 k8s-node01 2c-2g-40g 192.168.36.101 k8s-node02 2c-2g-40g 192.168.36.102 ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:1:0","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"步骤 ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:0","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"常规配置 # hosts 192.168.36.100 k8s-master 192.168.36.101 k8s-node01 192.168.36.102 k8s-node02 # 验证网卡mac地址和uuid唯一 cat /sys/class/net/ens160/address cat /sys/class/dmi/id/product_uuid # 禁用swap swapoff -a # 注释fstab里的swap sed -i.bak '/swap/s/^/#/' /etc/fstab # 关闭selinux setenforce 0 至于为什么要关闭swap，借用某博客的一句话“Swap，性能之鸿沟，生死之地，存亡之道，不可不省也。” ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:1","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"内核配置 # 永久加载br_netfilter模块 ## 在/etc/modules-load.d下添加br_netfilter.conf文件，内容如下： br_netfilter ## systemd-modules-load服务会在开机时自动探测并加载 # 永久修改内核参数 cat \u003c\u003cEOF \u003e /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sysctl -p /etc/sysctl.d/k8s.conf ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:2","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"添加k8s软件源 # repo文件 [kube] name=kube baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ gpgcheck=1 enabled=1 #repo_gpgcheck=1 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg 原文档在repo中添加repo_gpgcheck=1，实测无法验证key，遂将该配置去掉 https://github.com/kubernetes/kubernetes/issues/60134 ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:3","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"配置免密登录 # master-\u003enode01/02 ssh-keygen -t rsa ssh-copy-id -i .ssh/id_rsa.pub root@k8s-node01 原文档是三master节点，配置01-\u003e02/03，并未配置master-\u003enode，所以需要确认配置的目的 ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:4","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"安装ipvs # 安装依赖包 yum install -y conntrack ntpdate ntp ipvsadm ipset jq iptables curl sysstat libseccomp wget vim net-tools git # 开启ipvs 转发 modprobe br_netfilter modprobe ip_vs modprobe ip_vs_rr modprobe ip_vs_wrr modprobe ip_vs_sh modprobe nf_conntrack cat \u003e /etc/sysconfig/modules/ipvs.modules \u003c\u003c EOF #!/bin/bash modprobe -- ip_vs modprobe -- ip_vs_rr modprobe -- ip_vs_wrr modprobe -- ip_vs_sh modprobe -- nf_conntrack EOF ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:5","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"安装docker # 依赖包 yum install -y yum-utils device-mapper-persistent-data lvm2 Device Mapper 是 Linux2.6 内核中支持逻辑卷管理的通用设备映射机制，它为实现用于存储资源管理的块设备驱动提供了一个高度模块化的内核架构。 # 添加docker源 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo # 查看可用的docker版本 yum list docker-ce --showduplicates | sort -r # 安装 yum install docker-ce-20.10.9 docker-ce-cli-20.10.9 containerd.io -y # 启动docker服务 systemctl start docker systemctl enable docker 这里选择可选的最新版20.10.9 Docker CE指的是docker社区版，用于为了开发人员或小团队创建基于容器的应用，与团队成员分享和自动化的开发管道。Docker CE版本提供了简单的安装和快速的安装，以便可以立即开始开发。 ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:6","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"安装命令补全 # 安装bash-completion yum -y install bash-completion # 加载bash-completion source /etc/profile.d/bash_completion.sh Bash自带命令补全功能，但一般我们会安装bash-completion包来得到更好的补全效果，这个包提供了一些现成的命令补全脚本，一些基础的函数方便编写补全脚本，还有一个基本的配置脚本。 ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:7","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"镜像加速 主要的加速器有：Docker官方提供的中国registry mirror、阿里云加速器、DaoCloud 加速器，以阿里为例。 登陆阿里云容器模块：https://cr.console.aliyun.com 按如下配置 ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:8","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"验证docker docker --version docker run hello-world 以下为正常输出 ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:9","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"修改cgroup driver # 修改daemon.json，新增exec-opts { \"registry-mirrors\": [\"https://v16stybc.mirror.aliyuncs.com\"], \"exec-opts\": [\"native.cgroupdriver=systemd\"] } 注意json每项后面的“,” 修改cgroupdriver是为了消除告警： [WARNING IsDockerSystemdCheck]: detected “cgroupfs” as the Docker cgroup driver. The recommended driver is “systemd”. Please follow the guide at https://kubernetes.io/docs/setup/cri/ ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:10","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"安装keepalived 原文为三个master节点，所以需要配置高可用，测试为单master节点，所以暂时不需要 ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:11","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"k8s安装 # 查看可用的版本 yum list kubelet --showduplicates | sort -r # 安装 yum install -y kubelet-1.24.3 kubeadm-1.24.3 kubectl-1.24.3 # 修改kubectl使用的cgroupdriver vi /etc/sysconfig/kubelet KUBELET_EXTRA_ARGS=\"--cgroup-driver=systemd\" # 设置kubelet为开机自启动即可，由于没有生成配置文件，集群初始化后自动启动 systemctl enable kubelet 这里同样使用可用的最新版1.24.3 kubelet 运行在集群所有节点上，用于启动Pod和容器等对象的工具 kubeadm 用于初始化集群，启动集群的命令工具 kubectl 用于和集群通信的命令行，通过kubectl可以部署和管理应用，查看各种资源，创建、删除和更新各种组件 ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:12","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"kubectl命令补全 # kubelet命令补全 echo \"source \u003c(kubectl completion bash)\" \u003e\u003e ~/.bash_profile source .bash_profile kubectl completion命令生成特定shell的补全脚本，可选bash、zsh、fish ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:13","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"下载镜像(不需要) Kubernetes几乎所有的安装组件和Docker镜像都放在goolge自己的网站上,直接访问可能会有网络问题，一种解决办法是从阿里云镜像仓库下载镜像，拉取到本地以后改回默认的镜像tag。 参考：https://blog.csdn.net/yjf147369/article/details/80290881 考虑到本身有合适的服务器去下载官方镜像，就不用这种方法了，直接在服务器上下载转到本地导入 # 获取k8s所需要的镜像列表 kubeadm config images list --kubernetes-version=v1.24.3 # 下载镜像，由于是从k8s.gcr.io下载的，就不需要修改tag了 docker pull \u003cimagename\u003e # 导出镜像 docker save -o image.tar \u003cimagename\u003e # 导入镜像 docker load -i image.tar ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:14","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"初始化master # 初始化master kubeadm init --kubernetes-version=v1.24.3 --pod-network-cidr=10.224.0.0/16 --apiserver-advertise-address=192.168.36.100 --image-repository registry.aliyuncs.com/google_containers # 加载环境变量 echo \"export KUBECONFIG=/etc/kubernetes/admin.conf\" \u003e\u003e ~/.bash_profile source ~/.bash_profile 初始化错误 kubeadm初始化错误，提示kubelet服务可能运行不正常，检查kubelet服务状态 kubelet运行错误，可能是因为k8s 1.24已删除dockershim，无法调用docker的原因，需要使用cri-dockerd 使用cri-dockerd：https://blog.csdn.net/wuxingge/article/details/125458691 所有节点都需要安装 装完cri-dockerd，重新初始化kubeadm # 重置kubeadm kubeadm reset -f # 初始化kubeadm，添加cri-socket kubeadm init --kubernetes-version=v1.24.3 --pod-network-cidr=10.224.0.0/16 --apiserver-advertise-address=192.168.36.100 --image-repository registry.aliyuncs.com/google_containers --cri-socket=unix:///var/run/cri-dockerd.sock ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:15","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"安装flannel网络 # 安装 kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml flannel pod出现问题 查看kube-flannel-ds-amd64日志 这里提示该pod所使用的serviceaccount用户没有调用api group的权限 有关serviceaccount的参考：https://www.cnblogs.com/wlbl/p/10694364.html#serviceaccount 这里使用的授权插件是rbac，意思是通过角色控制权限。serviceaccount对象代表一个账号，如果要赋予这个帐号权限，我们还需要一个role对象和一个role与serviceaccount绑定的rolebinding对象，这些都是RBAC插件提供的资源对象。 观察到kube-flannel中有对这些对象的定义，看下执行时提示的问题： 这里提到ClusterRole和ClusterRoleBinding在v1beta1中找不到定义，所以这些配置没有生效 在yaml里找出这些配置的源码： 使用的api版本都是v1beta1，但是在v1.22+里已经不可用，需要更换成v1 https://github.com/kelseyhightower/kubernetes-the-hard-way/issues/612 但是我这里安装flannel没有出现warning的提示 更换之后重新执行，再重启kube-flannel就可以了 ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:16","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"将work节点加入集群 在master初始化结束时，会返回join所使用的token、discovery-token-ca-cert-hash等信息，如果没有记下来，需要通过以下方式获取： # 在master节点执行 ## 获取token kubeadm token list ## 获取discovery-token-ca-cert-hash openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2\u003e /dev/null | openssl dgst -sha256 -hex | sed 's/^.* //' token 过期时间是24小时 certificate-key 过期时间是2小时 # 重新生成基础的join命令 kubeadm token create --print-join-command # 添加work节点用生成的命令即可，如果是添加master节点还需要生成certificate-key kubeadm init phase upload-certs --experimental-upload-certs # 添加master节点，使用生成的join命令和certificate-key拼接起来即可 # 在node01和node02上执行，注意和kubeadm init一样要指定cri-socket kubeadm join 192.168.36.100:6443 --token 89y41v.eotdhbpk2v0a1n7d --discovery-token-ca-cert-hash sha256:7ad6aecb98f99621297f27e883e3a51d3114cdec64cefeb5d087a96f0fda8804 --cri-socket=unix:///var/run/cri-dockerd.sock ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:17","tags":null,"title":"","uri":"/k8s-deploy-manually/"},{"categories":null,"content":"安装dashboard # 下载yaml https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta8/aio/deploy/recommended.yaml # 修改镜像地址 sed -i 's/kubernetesui/registry.aliyuncs.com\\/google_containers/g' recommended.yaml # 添加nodeport，外部通过https://NodeIp:NodePort 访问Dashboard sed -i '/targetPort: 8443/a\\ \\ \\ \\ \\ \\ nodePort: 30001\\n\\ \\ type: NodePort' recommended.yaml # 增加管理员帐号 cat \u003e\u003e recommended.yaml \u003c\u003c EOF --- # ------------------- dashboard-admin ------------------- # apiVersion: v1 kind: ServiceAccount metadata: name: dashboard-admin namespace: kubernetes-dashboard --- apiVersion: rbac.authorization.k8s.io/v1beta1 kind: ClusterRoleBinding metadata: name: dashboard-admin subjects: - kind: ServiceAccount name: dashboard-admin namespace: kubernetes-dashboard roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin # 安装 kubectl apply -f recommended.yaml pod运行失败 查看pod运行状态 查看pod日志 当有多个节点时，安装到非主节点时，会出现一些问题。dashboard使用https去连接apiServer，由于证书问题会导致dial tcp 10.96.0.1:443: i/o timeout。 修改recommanded.yaml kind:Deployment......spec:nodeName:k8s-master # 指定安装的节点containers:- name:kubernetes-dashboardimage:registry.aliyuncs.com/google_containers/dashboard:v2.0.0-beta8imagePullPolicy:Alwaysports:- containerPort:8443protocol:TCP# 每个Deployment下都修改 # 重新安装dashboard kubectl delete -f recommended.yaml kubectl apply -f recommended.yaml web访问问题 由于设置了NodePort，可以将端口暴露在节点IP上，就可以使用https://:来访问了 web访问显示 查看日志，发现是证书问题 最好的解决方法是使用自签证书 # 由于/etc/kubernetes/pki下已经有ca证书，所以不需要再生成了 # 使用ca证书签发dashboard证书 openssl genrsa -out dashboard.key 2048 openssl req -new -key dashboard.key -out dashboard.csr -subj \"/O=white/CN=dashboard\" openssl x509 -req -in dashboard.csr -CA ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out dashboard.crt -days 3650 # 重新部署kubernetes-dashboard kubectl delete -f recommended.yaml kubectl create -f recommended.yaml # 重新生成secret，指定证书 kubectl create secret generic kubernetes-dashboard-certs -n kubernetes-dashboard --from-file=dashboard.crt=./dashboard.crt --from-file=dashboard.key=./dashboard.key # 提示kubernetes-dashboard-certs已存在的话，先把已有的secret删掉 kubectl delete secrets kubernetes-dashboard-certs -n kubernetes-dashboard # 重启kubernetes-dashboard kubectl delete pod kubernetes-dashboard-659c547786-hcwkz -n kubernetes-dashboard 在主机上安装ca证书，之后访问 创建dashboard-admin用户的token kubectl -n kubernetes-dashboard create token dashboard-admin 网上绝大部份资料，提到创建serviceaccount并绑定clusterrole之后，会自动生成一个secret给该sa，里面附带token，但实测没有。 或者可以手动创建一个secret绑定到dashborad-admin # 创建secretapiVersion:v1kind:Secretmetadata:name:dashboard-admin-secretannotations:kubernetes.io/service-account.name:dashboard-adminnamespace:kubernetes-dashboardtype:kubernetes.io/service-account-token# 将secret加到dashboard-adminapiVersion:v1kind:ServiceAccountmetadata:creationTimestamp:\"2022-07-27T09:36:47Z\"name:dashboard-adminnamespace:kubernetes-dashboardresourceVersion:\"30148\"uid:73fb5e3d-8b91-4d3b-bfb2-788451caf418secrets:- name:dashboard-admin-secret 可以先将dashboard-admin的配置导出成yaml，然后进行修改 kubectl get sa/dashboard-admin -o yaml -n kubernetes-dashboard \u003e dashboardd-admin.yaml v1.24开始默认不自动为sa生成secret 发现按照部署操作生成dashborad-admin这个sa，没有查找到对应的secret，正常来说都会通过tokencontroller来自动为其生成secret。 查找资料发现，从v1.24开始LegacyServiceAccountTokenNoAutoGeneration默认为enable，也就是默认不为任何sa自动生成secret The LegacyServiceAccountTokenNoAutoGeneration feature gate is beta, and enabled by default. When enabled, Secret API objects containing service account tokens are no longer auto-generated for every ServiceAccount. Use the TokenRequest API to acquire service account tokens, or if a non-expiring token is required, create a Secret API object for the token controller to populate with a service account token by following this guide. https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.24.md#urgent-upgrade-notes ","date":"0001-01-01","objectID":"/k8s-deploy-manually/:2:18","tags":null,"title":"","uri":"/k8s-deploy-manually/"}]